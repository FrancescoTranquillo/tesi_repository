mutate("CHIAMATA" = factor(ifelse(.$GIORNO %in% coswin, 1, 0)),
"BAG"=factor(cut.Date(df$GIORNO, breaks = "5 days",labels = F)))
ignore_columns <- c("testo","TEST.DI.TENUTA","NUMERO.CICLO",
"INIZIO.CICLO", "GIORNO")
df_bagged <- df[,-which(names(df) %in% ignore_columns)]
#conversione multipla delle feature da int a fattori
cols = c(38:88, 2)
df_bagged[,cols] %<>% lapply(function(x) fct_explicit_na(as.character(x)))
df_bagged <- df_bagged[,-c(3,6:37)]
#divisione in training e test set
df_train_index <- createDataPartition(df_bagged$CHIAMATA, p=0.75,list=F)
df_train <- df_bagged[df_train_index,]
df_test <- df_bagged[-df_train_index,]
#divisione in lista di bags
df_bagged <- df_train
bags <- as.list(split(df_bagged,f = df_bagged$BAG))
bags_label <- lapply(bags,function(bag){
if(1%in%bag$CHIAMATA){
bags <- list("INSTANCES"=bag, "FLAG"=1)
} else{
bags <- list("INSTANCES"=bag, "FLAG"=0)
}
})
table(factor(lapply(bags_label,function(bag){
s <- bag$FLAG
}) %>% do.call("rbind",.)))
bags_label_test <- list.subset(bags_label,FLAG=1)
freq_factor <- function(factor_column){
tt <- table(factor_column)
return(names(tt[which.max(tt)]))
}
unify_alarms <- function(alarm_column){
ifelse(1 %in% alarm_column,return(levels(alarm_column)[1]),return(levels(alarm_column)[2]))
}
meta <- function(df_instances){
temps_columns <- grep("temp\\.",names(df_instances))
alarm_columns <- grep("allarm|alarm",names(df_instances),ignore.case = T)
fct <- summarise_all(df_instances[,-c(temps_columns,alarm_columns)],funs(freq_factor(.)))
temps <- summarise_all(df_instances[,temps_columns],mean,na.rm=T)
alarms <- summarise_all(df_instances[,alarm_columns], funs(unify_alarms(.)))
TARGET <- 1
return(cbind(fct,temps,alarms,TARGET))
}
df_meta <- lapply(bags_label,FUN = function(bag){
if(bag$FLAG==1){
meta_example <- meta(bag$INSTANCES)
} else{
examples <- cbind(bag$INSTANCES, TARGET=0)
}
}) %>% do.call("rbind",.)
df_meta_pp <- df_meta[,-which(names(df_meta) %in% c("BAG","CHIAMATA"))]
df_meta_pp$TARGET <- as.numeric(df_meta_pp$TARGET)
#one-hot encoding
dummies <- dummyVars(~.,data = df_meta_pp,fullRank = T)
head(predict(dummies, newdata = df_meta_pp))
dummied <- as.data.frame(predict(dummies, newdata = df_meta_pp))
df_meta_pp <- dummied
#scaling
pp_df_no_nzv <- preProcess(df_meta_pp[ , -which(names(df_meta_pp) %in% "TARGET")],
method = c("range","medianImpute"))
pp_df_no_nzv
data <- predict(pp_df_no_nzv, newdata = df_meta_pp[,-which(names(df_meta_pp) %in% "TARGET")])
data$TARGET <- factor(df_meta_pp$TARGET)
levels(data$TARGET) <- c("neg", "pos")
df_meta_pp$TARGET <- factor(df_meta_pp$TARGET)
levels(df_meta_pp$TARGET) <- c("neg", "pos")
#data splitting
trainIndex <- createDataPartition(data$TARGET, p = .75,
list = FALSE,
times = 1)
training <- data[ trainIndex,]
testing <-  data[-trainIndex,]
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10,
classProbs = TRUE,
verboseIter=T,allowParallel = T,
summaryFunction = twoClassSummary)
nn <- readRDS(here("nn.rds"))
lsvm <- readRDS(here("lsvm.rds"))
logreg <- readRDS(here("logreg.rds"))
mod3 <- train(TARGET ~ ., data = training,
metric = "Sens",
maximize = TRUE,
method = "glm",
trControl = fitControl)
mod3
predictions <- predict(mod3, testing)
confusionMatrix(predictions, testing$TARGET,mode = "sens_spec",positive = "pos")
predictions <- predict(nn, testing)
confusionMatrix(predictions, testing$TARGET,mode = "sens_spec",positive = "pos")
predictions <- predict(lsvm, testing)
confusionMatrix(predictions, testing$TARGET,mode = "sens_spec",positive = "pos")
df_test_bag <- as.list(split(df_test,f = df_test$BAG))
df_test_label <- lapply(df_test_bags,function(bag){
if(1%in%bag$CHIAMATA){
bags <- list("INSTANCES"=bag, "FLAG"=1)
} else{
bags <- list("INSTANCES"=bag, "FLAG"=0)
}
})
df_test_label <- lapply(df_test_bag,function(bag){
if(1%in%bag$CHIAMATA){
bags <- list("INSTANCES"=bag, "FLAG"=1)
} else{
bags <- list("INSTANCES"=bag, "FLAG"=0)
}
})
View(df_test_label)
View(df_test_bag)
View(df_test_label)
predict(mod3,df_test_label$`1`$INSTANCES[1,])
preprocessing <- function(bag){
df <- bag$INSTANCES %>% .[,-which(names(.) %in% c("BAG","CHIAMATA"))]
#one-hot encoding
dummies <- dummyVars(~.,data = df,fullRank = T)
dummied <- as.data.frame(predict(dummies, newdata = df))
df<- dummied
#scaling e medianImpute
df_no_nzv <- preProcess(df,method = c("range","medianImpute"))
df <- predict(df_no_nzv, newdata = df)
}
df_test_label <- lapply(df_test_label,preprocessing)
View(df_test_label)
View(df_test_label)
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
classProbs = TRUE,
verboseIter=T,allowParallel = T,
summaryFunction = twoClassSummary)
mod3 <- train(TARGET ~ ., data = data,
metric = "Sens",
maximize = TRUE,
method = "glm",
trControl = fitControl)
preprocessing <- function(bag){
bag$FLAG <- bag$FLAG
df <- bag$INSTANCES %>% .[,-which(names(.) %in% c("BAG","CHIAMATA"))]
#one-hot encoding
dummies <- dummyVars(~.,data = df,fullRank = T)
dummied <- as.data.frame(predict(dummies, newdata = df))
df<- dummied
#scaling e medianImpute
df_no_nzv <- preProcess(df,method = c("range","medianImpute"))
df <- predict(df_no_nzv, newdata = df)
}
df_test_label <- lapply(df_test_label,preprocessing)
preprocessing <- function(bag){
bag$FLAGGED <- bag$FLAG
df <- bag$INSTANCES %>% .[,-which(names(.) %in% c("BAG","CHIAMATA"))]
#one-hot encoding
dummies <- dummyVars(~.,data = df,fullRank = T)
dummied <- as.data.frame(predict(dummies, newdata = df))
df<- dummied
#scaling e medianImpute
df_no_nzv <- preProcess(df,method = c("range","medianImpute"))
df <- predict(df_no_nzv, newdata = df)
}
df_test_label <- lapply(df_test_label,preprocessing)
preprocessing <- function(bag){
df <- bag$INSTANCES %>% .[,-which(names(.) %in% c("BAG","CHIAMATA"))]
#one-hot encoding
dummies <- dummyVars(~.,data = df,fullRank = T)
dummied <- as.data.frame(predict(dummies, newdata = df))
df<- dummied
#scaling e medianImpute
df_no_nzv <- preProcess(df,method = c("range","medianImpute"))
df <- predict(df_no_nzv, newdata = df)
list("INSTANCES"=df, "FLAG"=bag$FLAG)
}
df_test_label <- lapply(df_test_label,preprocessing)
#one-hot encoding
dummies <- dummyVars(data = df,fullRank = T)
#one-hot encoding
dummies <- dummyVars(~., data = df, fullRank = T)
dummied <- as.data.frame(predict(dummies, newdata = df))
preprocessing <- function(bag){
df <- bag$INSTANCES %>% .[,-which(names(.) %in% c("BAG","CHIAMATA"))]
#one-hot encoding
dummies <- dummyVars(~., data = df, fullRank = T)
dummied <- as.data.frame(predict(dummies, newdata = df))
df<- dummied
#scaling e medianImpute
df_no_nzv <- preProcess(df,method = c("range","medianImpute"))
df <- predict(df_no_nzv, newdata = df)
list("INSTANCES"=df, "FLAG"=bag$FLAG)
}
df_test_label <- lapply(df_test_label,preprocessing)
rm(list=ls())
df <-
read.csv2(file = "tabella_scontrini_text.csv",
header = T,
stringsAsFactors = F)
#conversione date e factors
df$INIZIO.CICLO <-
parse_date_time(df$INIZIO.CICLO, orders = "dmy hms")
df$CICLO.REGOLARE <-
factor(df$CICLO.REGOLARE)
df$TIPO.CICLO <- factor(df$TIPO.CICLO)
#caricamento coswin ####
coswin <- read.csv2(file = "coswin-isa/108841.csv",
header = T,
stringsAsFactors = F) %>%
.[-which(grepl("inseri", x = .$Descrizione,ignore.case = T)),24] %>%
as.character(.) %>%
dmy_hm(.) %>%
as_date(.) %>%
.[which(complete.cases(.))] %>%
unique(.)
#aggiunta colonna dei giorni nella tabella di scontrini
df <- df %>%
mutate("GIORNO" = as_date(.$INIZIO.CICLO))
#aggiunta della bag-label
df <- df %>%
mutate("CHIAMATA" = factor(ifelse(.$GIORNO %in% coswin, 1, 0)),
"BAG"=factor(cut.Date(df$GIORNO, breaks = "5 days",labels = F)))
ignore_columns <- c("testo","TEST.DI.TENUTA","NUMERO.CICLO",
"INIZIO.CICLO", "GIORNO")
df_bagged <- df[,-which(names(df) %in% ignore_columns)]
#conversione multipla delle feature da int a fattori
cols = c(38:88, 2)
df_bagged[,cols] %<>% lapply(function(x) fct_explicit_na(as.character(x)))
df_bagged <- df_bagged[,-c(3,6:37)]
#divisione in training e test set
df_train_index <- createDataPartition(df_bagged$CHIAMATA, p=0.75,list=F)
df_train <- df_bagged[df_train_index,]
df_test <- df_bagged[-df_train_index,]
#divisione in lista di bags
df_bagged <- df_train
bags <- as.list(split(df_bagged,f = df_bagged$BAG))
df_test_bag <- as.list(split(df_test,f = df_test$BAG))
bags_label <- lapply(bags,function(bag){
if(1%in%bag$CHIAMATA){
bags <- list("INSTANCES"=bag, "FLAG"=1)
} else{
bags <- list("INSTANCES"=bag, "FLAG"=0)
}
})
df_test_label <- lapply(df_test_bag,function(bag){
if(1%in%bag$CHIAMATA){
bags <- list("INSTANCES"=bag, "FLAG"=1)
} else{
bags <- list("INSTANCES"=bag, "FLAG"=0)
}
})
table(factor(lapply(bags_label,function(bag){
s <- bag$FLAG
}) %>% do.call("rbind",.)))
freq_factor <- function(factor_column){
tt <- table(factor_column)
return(names(tt[which.max(tt)]))
}
unify_alarms <- function(alarm_column){
ifelse(1 %in% alarm_column,return(levels(alarm_column)[1]),return(levels(alarm_column)[2]))
}
meta <- function(df_instances){
temps_columns <- grep("temp\\.",names(df_instances))
alarm_columns <- grep("allarm|alarm",names(df_instances),ignore.case = T)
fct <- summarise_all(df_instances[,-c(temps_columns,alarm_columns)],funs(freq_factor(.)))
temps <- summarise_all(df_instances[,temps_columns],mean,na.rm=T)
alarms <- summarise_all(df_instances[,alarm_columns], funs(unify_alarms(.)))
TARGET <- 1
return(cbind(fct,temps,alarms,TARGET))
}
df_meta <- lapply(bags_label,FUN = function(bag){
if(bag$FLAG==1){
meta_example <- meta(bag$INSTANCES)
} else{
examples <- cbind(bag$INSTANCES, TARGET=0)
}
}) %>% do.call("rbind",.)
df_meta_pp <- df_meta[,-which(names(df_meta) %in% c("BAG","CHIAMATA"))]
df_meta_pp$TARGET <- as.numeric(df_meta_pp$TARGET)
#one-hot encoding
dummies <- dummyVars(~.,data = df_meta_pp,fullRank = T)
head(predict(dummies, newdata = df_meta_pp))
dummied <- as.data.frame(predict(dummies, newdata = df_meta_pp))
df_meta_pp <- dummied
#scaling
pp_df_no_nzv <- preProcess(df_meta_pp[ , -which(names(df_meta_pp) %in% "TARGET")],
method = c("range","medianImpute"))
pp_df_no_nzv
data <- predict(pp_df_no_nzv, newdata = df_meta_pp[,-which(names(df_meta_pp) %in% "TARGET")])
data$TARGET <- factor(df_meta_pp$TARGET)
levels(data$TARGET) <- c("neg", "pos")
df_meta_pp$TARGET <- factor(df_meta_pp$TARGET)
levels(df_meta_pp$TARGET) <- c("neg", "pos")
preprocessing <- function(bag){
df <- bag$INSTANCES %>% .[,-which(names(.) %in% c("BAG","CHIAMATA"))]
#one-hot encoding
dummies <- dummyVars(~., data = df, fullRank = T)
dummied <- as.data.frame(predict(dummies, newdata = df))
df<- dummied
#scaling e medianImpute
df_no_nzv <- preProcess(df,method = c("range","medianImpute"))
df <- predict(df_no_nzv, newdata = df)
list("INSTANCES"=df, "FLAG"=bag$FLAG)
}
df_test_label <- lapply(df_test_label,preprocessing)
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
classProbs = TRUE,
verboseIter=T,allowParallel = T,
summaryFunction = twoClassSummary)
mod3 <- train(TARGET ~ ., data = data,
metric = "Sens",
maximize = TRUE,
method = "glm",
trControl = fitControl)
View(df_test_label)
predict(mod3,df_test_label$`1`$INSTANCES)
predict(mod3,df_test_label$`142`$INSTANCES)
predict(mod3,df_test_label$`148`$INSTANCES)
predict(mod3,df_test_label$`17`$INSTANCES)
mod3
#training ####
mod0 <- train(TARGET ~ ., data = data,
metric = "Sens",
maximize = TRUE,
method = "nnet",
trControl = fitControl)
mod0
mod3 <- train(TARGET ~ ., data = data,
metric = "ROC",
maximize = TRUE,
method = "glm",
trControl = fitControl)
mod3
predict(mod3,df_test_label$`148`$INSTANCES)
predict(mod3,df_test_label$`17`$INSTANCES)
predict(mod0,df_test_label$`17`$INSTANCES)
predict(mod0,df_test_label$`17`$INSTANCES,type = "prob")
predict(mod3,df_test_label$`148`$INSTANCES,type = "prob")
predict(mod0,df_test_label$`148`$INSTANCES,type = "prob")
predict(mod0,testing,type = "prob")
mod0
mod3
table(data$TARGET)
which(data$TARGET==1)
which(data$TARGET==pos)
which(data$TARGET=="pos")
data[265]
data[265,]
data[266,]
df_test_label$`142`$INSTANCES
View(df_test_label)
View(data)
View(bags_label)
#valutazione con test set ####
evaluate <- function(bag){
predictions <- predict(mod3, bag$INSTANCES)
list("INSTANCES"=df, "FLAG"=bag$FLAG, "PREDICTIONS"=predictions)
}
test <- lapply(df_test_label, evaluate)
predictions <- predict(mod0, bag$INSTANCES)
#valutazione con test set ####
evaluate <- function(bag){
predictions <- predict(mod0, bag$INSTANCES)
list("INSTANCES"=bag$INSTANCES, "FLAG"=bag$FLAG, "PREDICTIONS"=predictions)
}
test <- lapply(df_test_label, evaluate)
View(test)
#valutazione con test set ####
evaluate <- function(bag){
predictions <- predict(mod0, bag$INSTANCES)
list("INSTANCES"=bag$INSTANCES, "FLAG"=bag$FLAG, "PREDICTIONS"=freq_factor(predictions))
}
test <- lapply(df_test_label, evaluate)
View(test)
View(test)
#valutazione con test set ####
evaluate <- function(bag){
predictions <- predict(mod0, bag$INSTANCES,type = "prob")
list("INSTANCES"=bag$INSTANCES, "FLAG"=bag$FLAG, "PREDICTIONS"=predictions)
}
test <- lapply(df_test_label, evaluate)
View(test)
View(test)
View(test[["149"]][["INSTANCES"]])
View(df_train_index)
#divisione in training e test set
df_train_index <- createDataPartition(df_bagged$CHIAMATA, p=0.75,list=F,times = 1)
#divisione in training e test set
df_train_index <- createDataPartition(df_bagged$CHIAMATA, p=0.75,list=F,times = 1)
#divisione in training e test set
df_train_index <- createDataPartition(df_bagged$CHIAMATA, p=0.75,list=F,times = 1)
#divisione in training e test set
df_train_index <- createDataPartition(df_bagged$CHIAMATA, p=0.75,list=F,times = 1)
df_train <- df_bagged[df_train_index,]
df_train <- df_bagged[df_train_index,]
df_test <- df_bagged[-df_train_index,]
#divisione in lista di bags
df_bagged <- df_train
bags <- as.list(split(df_bagged,f = df_bagged$BAG))
df_test_bag <- as.list(split(df_test,f = df_test$BAG))
bags_label <- lapply(bags,function(bag){
if(1%in%bag$CHIAMATA){
bags <- list("INSTANCES"=bag, "FLAG"=1)
} else{
bags <- list("INSTANCES"=bag, "FLAG"=0)
}
})
df_test_label <- lapply(df_test_bag,function(bag){
if(1%in%bag$CHIAMATA){
bags <- list("INSTANCES"=bag, "FLAG"=1)
} else{
bags <- list("INSTANCES"=bag, "FLAG"=0)
}
})
table(factor(lapply(bags_label,function(bag){
s <- bag$FLAG
}) %>% do.call("rbind",.)))
freq_factor <- function(factor_column){
tt <- table(factor_column)
return(names(tt[which.max(tt)]))
}
unify_alarms <- function(alarm_column){
ifelse(1 %in% alarm_column,return(levels(alarm_column)[1]),return(levels(alarm_column)[2]))
}
meta <- function(df_instances){
temps_columns <- grep("temp\\.",names(df_instances))
alarm_columns <- grep("allarm|alarm",names(df_instances),ignore.case = T)
fct <- summarise_all(df_instances[,-c(temps_columns,alarm_columns)],funs(freq_factor(.)))
temps <- summarise_all(df_instances[,temps_columns],mean,na.rm=T)
alarms <- summarise_all(df_instances[,alarm_columns], funs(unify_alarms(.)))
TARGET <- 1
return(cbind(fct,temps,alarms,TARGET))
}
df_meta <- lapply(bags_label,FUN = function(bag){
if(bag$FLAG==1){
meta_example <- meta(bag$INSTANCES)
} else{
examples <- cbind(bag$INSTANCES, TARGET=0)
}
}) %>% do.call("rbind",.)
df_meta_pp <- df_meta[,-which(names(df_meta) %in% c("BAG","CHIAMATA"))]
df_meta_pp$TARGET <- as.numeric(df_meta_pp$TARGET)
#one-hot encoding
dummies <- dummyVars(~.,data = df_meta_pp,fullRank = T)
dummied <- as.data.frame(predict(dummies, newdata = df_meta_pp))
df_meta_pp <- dummied
#scaling
pp_df_no_nzv <- preProcess(df_meta_pp[ , -which(names(df_meta_pp) %in% "TARGET")],
method = c("range","medianImpute"))
pp_df_no_nzv
data <- predict(pp_df_no_nzv, newdata = df_meta_pp[,-which(names(df_meta_pp) %in% "TARGET")])
data$TARGET <- factor(df_meta_pp$TARGET)
levels(data$TARGET) <- c("neg", "pos")
df_meta_pp$TARGET <- factor(df_meta_pp$TARGET)
levels(df_meta_pp$TARGET) <- c("neg", "pos")
preprocessing <- function(bag){
df <- bag$INSTANCES %>% .[,-which(names(.) %in% c("BAG","CHIAMATA"))]
#one-hot encoding
dummies <- dummyVars(~., data = df, fullRank = T)
dummied <- as.data.frame(predict(dummies, newdata = df))
df<- dummied
#scaling e medianImpute
df_no_nzv <- preProcess(df,method = c("range","medianImpute"))
df <- predict(df_no_nzv, newdata = df)
list("INSTANCES"=df, "FLAG"=bag$FLAG)
}
df_test_label <- lapply(df_test_label,preprocessing)
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
classProbs = TRUE,
verboseIter=T,allowParallel = T,
summaryFunction = twoClassSummary)
mod3 <- train(TARGET ~ ., data = data,
metric = "ROC",
maximize = TRUE,
method = "glm",
trControl = fitControl)
#valutazione con test set ####
evaluate <- function(bag){
predictions <- predict(mod3, bag$INSTANCES,type = "prob")
list("INSTANCES"=bag$INSTANCES, "FLAG"=bag$FLAG, "PREDICTIONS"=predictions)
}
test <- lapply(df_test_label, evaluate)
predictions <- predict(mod3, bag$INSTANCES,type = "prob")
#valutazione con test set ####
evaluate <- function(bag){
predictions <- predict(mod3, bag$INSTANCES,type = "prob")
list("INSTANCES"=bag$INSTANCES, "FLAG"=bag$FLAG, "PREDICTIONS"=predictions)
}
test <- lapply(df_test_label, evaluate)
warnings()
mod1 <- train(TARGET ~ ., data = training,
metric = "ROC",
maximize = TRUE,
method = "svmLinear",
trControl = fitControl)
mod1 <- train(TARGET ~ ., data = data,
metric = "ROC",
maximize = TRUE,
method = "svmLinear",
trControl = fitControl)
#valutazione con test set ####
evaluate <- function(bag){
predictions <- predict(mod1, bag$INSTANCES,type = "prob")
list("INSTANCES"=bag$INSTANCES, "FLAG"=bag$FLAG, "PREDICTIONS"=predictions)
}
test <- lapply(df_test_label, evaluate)
View(test)
View(df_test_label)
preProcess(df_test_label$`146`$INSTANCES,method = method = c("range","medianImpute"))
preProcess(df_test_label$`146`$INSTANCES,method = c("range","medianImpute"))
a <- preProcess(df_test_label$`146`$INSTANCES,method = c("range","medianImpute"))
a
View(a)
