scale_x_discrete()+
facet_wrap(vars(ESITO.CICLO)) +
coord_flip()
)
ggplotly(
ggplot(data = tabella_scontrini[-which(tabella_scontrini$ALLARMI=="Nessun allarme rilevato"),]) +
aes(fill = ALLARMI, x = CATEGORIA) +
geom_bar(color="black",show.legend = F)+
scale_fill_viridis_d(option  = "viridis",direction = -1) +
theme_minimal() +
scale_x_discrete()+
facet_wrap(vars(ESITO.CICLO)) +
coord_flip()
)
ggplotly(
ggplot(data = tabella_scontrini[-which(tabella_scontrini$ALLARMI=="Nessun allarme rilevato"),]) +
aes(fill = ALLARMI, x = CATEGORIA) +
geom_bar(color="black",width = 0.5)+
scale_fill_viridis_d(option  = "viridis",direction = -1) +
theme_minimal() +
scale_x_discrete()+
facet_wrap(vars(ESITO.CICLO)) +
coord_flip()
)
ggplotly(
ggplot(data = tabella_scontrini[-which(tabella_scontrini$ALLARMI=="Nessun allarme rilevato"),]) +
aes(fill = ALLARMI, x = CATEGORIA) +
geom_bar(color="black",width = 0.5,size=0.5)+
scale_fill_viridis_d(option  = "viridis",direction = -1) +
theme_minimal() +
scale_x_discrete()+
facet_wrap(vars(ESITO.CICLO)) +
coord_flip()
)
ggplotly(
ggplot(data = tabella_scontrini[-which(tabella_scontrini$ALLARMI=="Nessun allarme rilevato"),]) +
aes(fill = ALLARMI, x = CATEGORIA) +
geom_bar(color="black",width = 0.5,size=3)+
scale_fill_viridis_d(option  = "viridis",direction = -1) +
theme_minimal() +
scale_x_discrete()+
facet_wrap(vars(ESITO.CICLO)) +
coord_flip()
)
ggplotly(
ggplot(data = tabella_scontrini[-which(tabella_scontrini$ALLARMI=="Nessun allarme rilevato"),]) +
aes(fill = ALLARMI, x = CATEGORIA) +
geom_bar(color="black",width = 0.5,size=0.2)+
scale_fill_viridis_d(option  = "viridis",direction = -1) +
theme_minimal() +
scale_x_discrete()+
facet_wrap(vars(ESITO.CICLO)) +
coord_flip()
)
ggplotly(
ggplot(data = tabella_scontrini[-which(tabella_scontrini$ALLARMI=="Nessun allarme rilevato"),]) +
aes(fill = ALLARMI, x = CATEGORIA) +
geom_bar(color="black",width = 2.5,size=0.2)+
scale_fill_viridis_d(option  = "viridis",direction = -1) +
theme_minimal() +
scale_x_discrete()+
facet_wrap(vars(ESITO.CICLO)) +
coord_flip()
)
ggplotly(
ggplot(data = tabella_scontrini[-which(tabella_scontrini$ALLARMI=="Nessun allarme rilevato"),]) +
aes(fill = ALLARMI, x = CATEGORIA) +
geom_bar(color="black",width = 1,size=0.2)+
scale_fill_viridis_d(option  = "viridis",direction = -1) +
theme_minimal() +
scale_x_discrete()+
facet_wrap(vars(ESITO.CICLO)) +
coord_flip()
)
ggplotly(
ggplot(data = tabella_scontrini[-which(tabella_scontrini$ALLARMI=="Nessun allarme rilevato"),]) +
aes(fill = ALLARMI, x = CATEGORIA) +
geom_bar(color="black",width = 0.8,size=0.2)+
scale_fill_viridis_d(option  = "viridis",direction = -1) +
theme_minimal() +
scale_x_discrete()+
facet_wrap(vars(ESITO.CICLO)) +
coord_flip()
)
ggplotly(
ggplot(data = tabella_scontrini[-which(tabella_scontrini$ALLARMI=="Nessun allarme rilevato"),]) +
aes(fill = ALLARMI, x = CATEGORIA) +
geom_bar(color="black",width = 0.8,size=0.2)+
scale_fill_viridis_d(option  = "plasma",direction = -1) +
theme_minimal() +
scale_x_discrete()+
facet_wrap(vars(ESITO.CICLO)) +
coord_flip()
)
ggplotly(
ggplot(data = tabella_scontrini[-which(tabella_scontrini$ALLARMI=="Nessun allarme rilevato"),]) +
aes(fill = ALLARMI, x = CATEGORIA) +
geom_bar(color="black",width = 0.8,size=0.2,position = "dodge")+
scale_fill_viridis_d(option  = "plasma",direction = -1) +
theme_minimal() +
scale_x_discrete()+
facet_wrap(vars(ESITO.CICLO)) +
coord_flip()
)
ggplotly(
ggplot(data = tabella_scontrini[-which(tabella_scontrini$ALLARMI=="Nessun allarme rilevato"),]) +
aes(fill = ALLARMI, x = CATEGORIA) +
geom_bar(color="black",width = 0.8,size=0.2)+
scale_fill_viridis_d(option  = "inferno",direction = -1) +
theme_minimal() +
scale_x_discrete()+
facet_wrap(vars(ESITO.CICLO)) +
coord_flip()
)
ggplotly(
ggplot(data = tabella_scontrini[-which(tabella_scontrini$ALLARMI=="Nessun allarme rilevato"),]) +
aes(fill = ALLARMI, x = CATEGORIA) +
geom_bar(color="black",width = 0.8,size=0.2)+
scale_fill_viridis_d(option  = "viridis",direction = 1) +
theme_minimal() +
scale_x_discrete()+
facet_wrap(vars(ESITO.CICLO)) +
coord_flip()
)
esquisser()
col <-  c(1:2637)
tabella_scontrini$NUMERO.SERIALE <- as.character(tabella_scontrini$NUMERO.SERIALE)
tabella_scontrini$NUMERO.SERIALE[col] <- "lava.2"
tabella_scontrini$NUMERO.SERIALE <- factor(tabella_scontrini$NUMERO.SERIALE)
colnames(tabella_scontrini)[which(names(tabella_scontrini) == "ESITO CICLO")] <- "ESITO.CICLO"
esquisser()
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
# path <- here("isareport16-19")
# lista_scontrini <- as.list(list.files(path, pattern = "*.txt"))
#
# scontrinol <- lapply(lista_scontrini, function(path_scontrino)
#   readLines(paste0(path, "\\", path_scontrino), encoding = "UTF-8"))
#
# tabella_scontrini <- pblapply(scontrinol, morpher) %>%
#   bind_rows(.)
#
tabella_scontrini <- read.csv2(here("tabella_scontrini_multimacchina.csv"),header = T)
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
readLines(paste0(path, "\\", lista_scontrini[34]), encoding = "UTF-8")
path <- here("isareport16-19")
lista_scontrini <- as.list(list.files(path, pattern = "*.txt"))
readLines(paste0(path, "\\", lista_scontrini[34]), encoding = "UTF-8")
readLines(paste0(path, "\\", lista_scontrini[34]), encoding = "UTF-8")
cat(readLines(paste0(path, "\\", lista_scontrini[34]), encoding = "UTF-8"))
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
scontrino_txt()[[2]]
paste(scontrino_txt()[[2]],collapse = "\\n")
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
rawText
splitText
runApp('ISA-test')
rawText
runApp('ISA-test')
splitText
runApp('ISA-test')
lapply(splitText, p)
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
shiny::runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
#path = "C:\\Users\\frtranquillo\\github\\tesi_repository\\Data\\ISA\\isareport16-19\\16-17-18"
path <- here("isareport16-19")
lista_scontrini <- as.list(list.files(path, pattern = "*.txt"))
library(tidyverse)
library(dplyr)
library(lubridate)
library(here)
library(pbapply)
library(forcats)
library(readr)
library(tm)
library(magrittr)
library(tabulizer)
#path = "C:\\Users\\frtranquillo\\github\\tesi_repository\\Data\\ISA\\isareport16-19\\16-17-18"
path <- here("isareport16-19")
lista_scontrini <- as.list(list.files(path, pattern = "*.txt"))
path_scontrino <- lista_scontrini[[333]]
readLines(path_scontrino,encoding = "UTF8")
scontrino <-
readLines(paste0(path, "\\", path_scontrino), encoding = "UTF-8")
scontrino
# n <- na.omit(str_extract(scontrino,"NUMERO CICLO: "))
if (last(grepl("\\d\\d:\\d\\d:\\d\\d CICLO REGOLARE|\\d\\d:\\d\\d:\\d\\d CICLO IRREGOLARE",
scontrino,
perl = T)) == T) {
# print(n)
# da numero seriale a numero ciclo ----------------------------------------
scontrino_header <-
na.omit(gsub(scontrino,
pattern = "\\d\\d:\\d\\d:\\d\\d .*",
replacement = NA)) %>%
.[5:(length(.) - 1)]
# print(scontrino_header[11])
scontrino_header2 <- scontrino_header[-2]
nomi_header <- str_extract(scontrino_header2,".*(?=: )")
df_header_2 <- str_extract(scontrino_header2,"(?<=: ).*") %>%
t() %>%
data.frame() %>%
set_colnames(nomi_header)
# versione text-mining
sclean_header <- scontrino_header[length(scontrino_header) - 1]
# estrazione regolare/irregolare ------------------------------------------
scontrino_regolare <-
na.omit(str_extract(scontrino,
pattern ="CICLO IRREGOLARE|CICLO REGOLARE"))
# estrazione fasi del reprocessing ----------------------------------------
scontrino_footer <-
na.omit(str_extract(scontrino,
pattern = "\\d\\d:\\d\\d:\\d\\d .*")) %>%
.[1:(length(.) - 1)]
#versione text-mining
sclean_footer <-
gsub(scontrino_footer,
pattern = "\\d\\d:\\d\\d:\\d\\d ",
replacement = "")
if (any(grepl("PRELEVATO", sclean_footer))) {
sclean_footer %<>% .[-which(grepl("PRELEVATO", sclean_footer))]
}
#
sclean <- paste(sclean_header,
paste(sclean_footer, collapse = " "),
scontrino_regolare)
#
righe_allarmi <- grepl(pattern = "allarme|alarm", sclean_footer,perl = T,ignore.case = T)
allarmi_rilevati <- sclean_footer[which(righe_allarmi==T)]
# if (!is_empty(righe_allarmi)) {
#   nome_allarmi_rilevati <-
#     nomi_allarmi[which(grepl(
#       sclean_footer[righe_allarmi],
#       nomi_allarmi,
#       perl = F,
#       ignore.case = T,
#       fixed = F
#     ))]
#   if (is_empty(nome_allarmi_rilevati)) {
#     nome_allarmi_rilevati <- "ALTRO"
#   }
#   allarmi_rilevati <- ifelse(nome_allarmi_rilevati == nomi_allarmi, 1, 0) %>%
#     t() %>%
#     data.frame() %>%
#     set_colnames(nomi_allarmi)
# } else {
#   allarmi_rilevati <- rep(0, length(nomi_allarmi)) %>%
#     t() %>%
#     data.frame()%>%
#     set_colnames(nomi_allarmi)
# }
#trasformazione header:
#estrazione di inizio ciclo, tipo ciclo e numero ciclo
dati_header <-
na.omit(
str_extract(
scontrino_header,
"(?<=INIZIO CICLO: ).*|(?<=TIPO CICLO: ).*"
)
)
label_dati_header <-
c("INIZIO CICLO", "TIPO CICLO")
df_header <-
data.frame(cbind(label_dati_header, dati_header), stringsAsFactors = F)
tmydf_header = setNames(data.frame(t(df_header[,-1])), df_header[, 1])
head(tmydf_header)
df_header <- tmydf_header
#trasformazione footer
# tempi <-
#   parse_time(substr(scontrino_footer, 1, 8), format = "%H:%M:%S")
#
# dt <- difftime(tempi, lag(tempi, default = first(tempi)))
# processi <- gsub("(\\d\\d:){2,}\\d\\d ", "", scontrino_footer)
# temperature <- as.numeric(na.omit(str_extract(processi, "(\\d*)(?=?)")))
# # if (length(temperature) != 0) {
#   temp_flag <- 1
#   temperature_labels <-
#     paste0("temp.", seq(1, length(temperature), 1))
#   temperature_table <-
#     data.frame(t(temperature[1:2])) %>%
#     set_colnames(temperature_labels[1:2])
# } else
#   temp_flag <- 0
#### tabelle footer ####
# processi <- sapply(processi,
#                    trimmer,
#                    USE.NAMES = F,
#                    simplify = T)
# processi_table <-
#   data.frame(cbind(unique(processi), "1"), stringsAsFactors = F)
# processi_table_header <-
#   setNames(data.frame(t(processi_table[,-1])), processi_table[, 1])
#
# t.labels <- paste0("t.", seq(1, length(dt), 1))
#
# dt_table <-
#   data.frame(cbind(t.labels, as.numeric(dt)), stringsAsFactors = F)
#
# dt_table_header = setNames(data.frame(t(dt_table[,-1])), dt_table[, 1])
#
#unione delle tabelle del footer
# if (temp_flag == 1) {
#   df_footer <-
#     data.frame(
#       # processi_table_header,
#       # dt_table_header,
#       temperature_table
#     )
#   df <- cbind(df_header, df_footer,df_header_2)
#
# } else
#allarmi_rilevati
df_header_2 <- df_header_2[,-which(names(df_header_2)%in%c("TIPO CICLO",
"INIZIO CICLO"
))]
df <- cbind(df_header,df_header_2)
if(length(df)<11){
df%<>%mutate("IDENTIFICATIVO"="ALTRO")
}
df <- df[,1:11]
df%<>%mutate("ALLARMI"=ifelse(length(allarmi_rilevati)==0,
yes = "Nessun allarme rilevato",
no = allarmi_rilevati))
df%<>%.[,-which(colnames(.)%in%c("MEDICO",
"PAZIENTE"))]
df <- cbind(df,"testo"=sclean,"ESITO CICLO"=scontrino_regolare,"print"=paste(scontrino,sep = "\\n"))
#trasformazione footer
# df_footer <- df_footer %>%
#   mutate("CICLO REGOLARE" = ifelse(any(
#     grepl("CICLO IRREGOLARE", scontrino_regolare) == TRUE
#   ), 0, 1))
#
# df <- cbind(df_header, testo = sclean, allarmi_rilevati)
# df <- df$`TIPO CICLO` %>% fct_collapse(
#    CALIBRAZIONE = c("CALIBRATION", "CALIBRAZIONE"),
#    "DISINFEZIONE COMPLETA" = c("COMPLETE DISINFECTION", "DISINFEZIONE COMPLETA"),
#    "DISINFEZIONE VELOCE" = c("DISINFEZIONE VELOCE", "FAST DISINFECTION"),
#    "STERILIZZAZIONE COMPLETA" = c("COMPLETE STERILIZATION", "STERILIZZAZIONE COMPLETA"),
#    "STERILIZZAZIONE VELOCE" = c(
#      " STERILIZAZIONE VELOCE" ,
#      "FAST STERILIZATION",
#      "ster velo1",
#      " STERILIZZAZIONE VELOCE"
#    )
#  )
return(df)
}
df$print
str(scontrino)
paste(scontrino,sep = "\\n")
as.character(paste(scontrino,sep = "\\n"))
df <- cbind(df,"testo"=sclean,"ESITO CICLO"=scontrino_regolare,"print"=as.character(paste(scontrino,sep = "\\n")))
View(df)
df <- cbind(df,"testo"=sclean,"ESITO CICLO"=scontrino_regolare,"print"=paste(scontrino,sep = "\\n",collapse = " "))
df <- cbind(df,"testo"=sclean,"ESITO CICLO"=scontrino_regolare,"print"=paste(scontrino,sep = "\\n",collapse = " "))
df
scontrino
paste(scontrino,collapse = "\\n")
paste(scontrino,collapse = "\\n",sep="\\n")
shiny::runApp('ISA-test')
paste(scontrino,collapse = "\\n",sep="\\n")
strsplit(paste(scontrino,collapse = "\\n",sep="\\n"),"\\n")
strsplit(paste(scontrino,collapse = "\\n"),"\\n")
paste(scontrino,collapse = "\\n")
paste(scontrino,collapse = "")
paste(scontrino,collapse = "",sep="\\n")
paste(scontrino,sep="\\n")
scontrino
str_glue(scontrino)
paste(scontrino, collapse = "\\n")
a <- paste(scontrino, collapse = "\\n")
stringi::stri_split(a, regex = "\\n")
a <- paste(scontrino, collapse = "\\n\\n")
stringi::stri_split(a, regex = "\\n")
a <- paste(scontrino, sep = "\\n")
a
a
scontrino
stringi::stri_split(a, "\\n")
stringi::stri_split(a, regex="\\n")
lapply(stringi::stri_split(a, regex="\\n"),p)
paste(scontrino,collapse = "\\n")
stringi::stri_split(paste(scontrino,collapse = "\\n"),regex="\\n")
strsplit(paste(scontrino,collapse = "\\n"),split = "\\n")
strsplit(paste(scontrino,collapse = "\\n"),split = "\\n",perl = T)
paste(scontrino,collapse = "")
paste(scontrino,collapse = "\n")
paste(scontrino,collapse = "\n") %>% strsplit("\n")
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
shiny::runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
selectedRow()
selectedRow()
# split the text into a list of character vectors
#   Each element in the list contains one line
splitText <- stringi::stri_split(str = selectedRow(), regex = '\n')
splitText
# wrap a paragraph tag around each element in the list
replacedText <- lapply(splitText, p)
replacedText
splitText
list(splitText)
list(splitText[[1]])
as.list(splitText[[1]])
# split the text into a list of character vectors
#   Each element in the list contains one line
splitText <- as.list(stringi::stri_split(str = selectedRow(), regex = '\n'))
splitText
# split the text into a list of character vectors
#   Each element in the list contains one line
splitText <- stringi::stri_split(str = selectedRow(), regex = '\n') %>%
as.list(.[[1]])
splitText
# split the text into a list of character vectors
#   Each element in the list contains one line
splitText <- stringi::stri_split(str = selectedRow(), regex = '\n') %>%
as.list(.[[1]])
# wrap a paragraph tag around each element in the list
replacedText <- lapply(splitText, p)
replacedText
splitText <- as.list(splitText[[1]])
# wrap a paragraph tag around each element in the list
replacedText <- lapply(splitText, p)
replacedText
runApp()
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
