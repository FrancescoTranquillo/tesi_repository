backprop <- function(giorno){
as.list(seq(from=giorno-1,to =giorno-3,by = -1))
}
giorni_predittivi <- sapply(giorni_guasti, backprop)
# assegno flag=1 in corrispondenza dei giorni predittivi
df%<>%mutate(flag=ifelse(as.Date(df$GIORNO)%in%giorni_predittivi,1,0))
trainIndex <- createDataPartition(df$flag, p = .75,
list = FALSE,
times = 1)
nlp_training <- df[ trainIndex,]
nlp_testing <-  df[-trainIndex,]
clean_corpus <- function(corpus) {
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, stemDocument)
}
descr_corpus_train <- VCorpus(VectorSource(nlp_training$testo))
descr_train_labels <- factor(nlp_training$flag)
descr_corpus_clean_train<-clean_corpus(descr_corpus_train)
descr_dtm_train <- DocumentTermMatrix(descr_corpus_clean_train)
descr_corpus_test <- VCorpus(VectorSource(nlp_testing$testo))
descr_test_labels <- factor(nlp_testing$flag)
descr_corpus_clean_test<-clean_corpus(descr_corpus_test)
descr_dtm_test <- DocumentTermMatrix(descr_corpus_clean_test)
descr_freq_words <- findFreqTerms(descr_dtm_train,lowfreq = 1)
descr_dtm_freq_train <- descr_dtm_train[, descr_freq_words]
descr_dtm_freq_test <- descr_dtm_test[, descr_freq_words]
descr_dtm_freq_test <- descr_dtm_test[, which(names(descr_dtm_test)%in%descr_freq_words)]
convert_counts <- function(x) {
x <- ifelse(x > 0, 1, 0)
}
descr_train <-as.data.frame(apply(descr_dtm_freq_train, MARGIN = 2, convert_counts))
descr_test <- as.data.frame(apply(descr_dtm_freq_test, MARGIN = 2, convert_counts))
fitControl <- trainControl(method = "repeatedcv",
number = 10,
classProbs = TRUE,
repeats = 3,
verboseIter=T,
allowParallel = T)
descr_train$TARGET <- factor(nlp_training$flag)
levels(descr_train$TARGET) <- c("neg", "pos")
levels(descr_test_labels) <- c("neg", "pos")
train_pp_nozv <- preProcess(descr_train[ , -which(names(descr_train) %in% "TARGET")],
method = c("range","nzv"))
train_pp_nozv
train_pp_nozv <- predict(train_pp_nozv, newdata = descr_train[,-which(names(descr_train) %in% "TARGET")])
grid <- expand.grid(C = c(0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2,5))
train_pp_nozv$TARGET <- factor(nlp_training$flag)
levels(train_pp_nozv$TARGET) <- c("neg", "pos")
nlp_classifier <- caret::train(TARGET~.,
data=train_pp_nozv,
method="bayesglm",
trControl = fitControl)
predictions <- predict(nlp_classifier,newdata = descr_test)
confusionMatrix(predictions, descr_test_labels, positive = "pos")
#trovo le date dei 5 giorni precedenti ad ognuno dei giorni appena trovati
# attraverso la funzione backprop
backprop <- function(giorno){
as.list(seq(from=giorno-1,to =giorno-7,by = -1))
}
giorni_predittivi <- sapply(giorni_guasti, backprop)
# assegno flag=1 in corrispondenza dei giorni predittivi
df%<>%mutate(flag=ifelse(as.Date(df$GIORNO)%in%giorni_predittivi,1,0))
trainIndex <- createDataPartition(df$flag, p = .75,
list = FALSE,
times = 1)
nlp_training <- df[ trainIndex,]
nlp_testing <-  df[-trainIndex,]
clean_corpus <- function(corpus) {
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, stemDocument)
}
descr_corpus_train <- VCorpus(VectorSource(nlp_training$testo))
descr_train_labels <- factor(nlp_training$flag)
descr_corpus_clean_train<-clean_corpus(descr_corpus_train)
descr_dtm_train <- DocumentTermMatrix(descr_corpus_clean_train)
descr_corpus_test <- VCorpus(VectorSource(nlp_testing$testo))
descr_test_labels <- factor(nlp_testing$flag)
descr_corpus_clean_test<-clean_corpus(descr_corpus_test)
descr_dtm_test <- DocumentTermMatrix(descr_corpus_clean_test)
descr_freq_words <- findFreqTerms(descr_dtm_train,lowfreq = 1)
descr_dtm_freq_train <- descr_dtm_train[, descr_freq_words]
descr_dtm_freq_test <- descr_dtm_test[, which(names(descr_dtm_test)%in%descr_freq_words)]
convert_counts <- function(x) {
x <- ifelse(x > 0, 1, 0)
}
descr_train <-as.data.frame(apply(descr_dtm_freq_train, MARGIN = 2, convert_counts))
descr_test <- as.data.frame(apply(descr_dtm_freq_test, MARGIN = 2, convert_counts))
fitControl <- trainControl(method = "repeatedcv",
number = 10,
classProbs = TRUE,
repeats = 3,
verboseIter=T,
allowParallel = T)
descr_train$TARGET <- factor(nlp_training$flag)
levels(descr_train$TARGET) <- c("neg", "pos")
levels(descr_test_labels) <- c("neg", "pos")
nlp_classifier <- caret::train(TARGET~.,
data=descr_train,
method="bayesglm",
trControl = fitControl)
nlp_classifier
predictions <- predict(nlp_classifier,newdata = descr_test)
confusionMatrix(predictions, descr_test_labels, positive = "pos")
library(tidyverse)
library(dplyr)
library(lubridate)
library(here)
library(readxl)
library(magrittr)
library(DataExplorer)
library(caret)
library(rlist)
library(tm)
library(e1071)
# library(pROC)
# Lo script unisce la tabella degli scontrini a quella di coswin,
# aggiungendo le colonne chiamata e chiamata-x dove x sono i giorni precedenti
# all'effettiva chiamata
#importa tabella degli scontrini
df <-
read.csv2(file = "tabella_scontrini_text.csv",
header = T,
stringsAsFactors = F)
#conversione date e factors
df$INIZIO.CICLO <-
parse_date_time(df$INIZIO.CICLO, orders = "dmy hms")
df$CICLO.REGOLARE <-
factor(df$CICLO.REGOLARE)
df$TIPO.CICLO <- factor(df$TIPO.CICLO)
#caricamento coswin####
# vengono eliminate le righe corrispondenti a chiamate relative all'inserimento
# nel db della macchina di un nuovo strumento.
coswin <- read.csv2(file = "coswin-isa/108841.csv",
header = T,
stringsAsFactors = F) %>%
.[-which(grepl("inseri", x = .$Descrizione,ignore.case = T)),24] %>%
as.character(.) %>%
dmy_hm(.) %>%
as_date(.) %>%
.[which(complete.cases(.))] %>%
unique(.)
#aggiunta colonna dei giorni nella tabella di scontrini
df <- df %>%
mutate("GIORNO" = as_date(.$INIZIO.CICLO))
#aggiunta della bag-label
df <- df %>%
mutate("CHIAMATA" = factor(ifelse(.$GIORNO %in% coswin, 1, 0)))
# "BAG"=factor(cut.Date(df$GIORNO, breaks = "5 days",labels = F)))
ignore_columns <- c("TEST.DI.TENUTA","NUMERO.CICLO",
"INIZIO.CICLO")
df <- df[,-which(names(df) %in% ignore_columns)]
#trovo i giorni in cui ci sono state chiamate a coswin
giorni_guasti <- unique(df[which(df$CHIAMATA==1),which(colnames(df)=="GIORNO")])
#trovo le date dei 5 giorni precedenti ad ognuno dei giorni appena trovati
# attraverso la funzione backprop
backprop <- function(giorno){
as.list(seq(from=giorno-1,to =giorno-2,by = -1))
}
giorni_predittivi <- sapply(giorni_guasti, backprop)
# assegno flag=1 in corrispondenza dei giorni predittivi
df%<>%mutate(flag=ifelse(as.Date(df$GIORNO)%in%giorni_predittivi,1,0))
trainIndex <- createDataPartition(df$flag, p = .75,
list = FALSE,
times = 1)
nlp_training <- df[ trainIndex,]
nlp_testing <-  df[-trainIndex,]
clean_corpus <- function(corpus) {
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, stemDocument)
}
#Data preparation â€“ cleaning and standardizing text data####
descr_corpus_train <- VCorpus(VectorSource(nlp_training$testo))
descr_train_labels <- factor(nlp_training$flag)
descr_corpus_clean_train<-clean_corpus(descr_corpus_train)
descr_dtm_train <- DocumentTermMatrix(descr_corpus_clean_train)
descr_corpus_test <- VCorpus(VectorSource(nlp_testing$testo))
descr_test_labels <- factor(nlp_testing$flag)
descr_corpus_clean_test<-clean_corpus(descr_corpus_test)
descr_dtm_test <- DocumentTermMatrix(descr_corpus_clean_test)
descr_freq_words <- findFreqTerms(descr_dtm_train,lowfreq = 1)
descr_dtm_freq_train <- descr_dtm_train[, descr_freq_words]
descr_dtm_freq_test <- descr_dtm_test[, which(names(descr_dtm_test)%in%descr_freq_words)]
convert_counts <- function(x) {
x <- ifelse(x > 0, 1, 0)
}
descr_train <-as.data.frame(apply(descr_dtm_freq_train, MARGIN = 2, convert_counts))
descr_test <- as.data.frame(apply(descr_dtm_freq_test, MARGIN = 2, convert_counts))
# descr_classifier2 <-
#   naiveBayes(descr_train, descr_train_labels, laplace = 1,)
#
# descr_test_pred2 <- predict(descr_classifier2, descr_test)
#
# confusionMatrix(descr_test_pred2, descr_test_labels,
#                                 positive = "0")
fitControl <- trainControl(method = "repeatedcv",
number = 10,
classProbs = TRUE,
repeats = 3,
verboseIter=T,
allowParallel = T)
descr_train$TARGET <- factor(nlp_training$flag)
levels(descr_train$TARGET) <- c("neg", "pos")
levels(descr_test_labels) <- c("neg", "pos")
# train_pp_nozv <- preProcess(descr_train[ , -which(names(descr_train) %in% "TARGET")],
#            method = c("range","nzv"))
#
# train_pp_nozv
# train_pp_nozv <- predict(train_pp_nozv, newdata = descr_train[,-which(names(descr_train) %in% "TARGET")])
grid <- expand.grid(C = c(0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2,5))
train_pp_nozv$TARGET <- factor(nlp_training$flag)
levels(train_pp_nozv$TARGET) <- c("neg", "pos")
nlp_classifier <- caret::train(TARGET~.,
data=descr_train,
method="bayesglm",
trControl = fitControl)
nlp_classifier
library(tidyverse)
library(dplyr)
library(lubridate)
library(here)
library(readxl)
library(magrittr)
library(DataExplorer)
library(caret)
library(rlist)
library(tm)
library(e1071)
# library(pROC)
# Lo script unisce la tabella degli scontrini a quella di coswin,
# aggiungendo le colonne chiamata e chiamata-x dove x sono i giorni precedenti
# all'effettiva chiamata
#importa tabella degli scontrini
df <-
read.csv2(file = "tabella_scontrini_text.csv",
header = T,
stringsAsFactors = F)
#conversione date e factors
df$INIZIO.CICLO <-
parse_date_time(df$INIZIO.CICLO, orders = "dmy hms")
df$CICLO.REGOLARE <-
factor(df$CICLO.REGOLARE)
df$TIPO.CICLO <- factor(df$TIPO.CICLO)
#caricamento coswin####
# vengono eliminate le righe corrispondenti a chiamate relative all'inserimento
# nel db della macchina di un nuovo strumento.
coswin <- read.csv2(file = "coswin-isa/108841.csv",
header = T,
stringsAsFactors = F) %>%
.[-which(grepl("inseri", x = .$Descrizione,ignore.case = T)),24] %>%
as.character(.) %>%
dmy_hm(.) %>%
as_date(.) %>%
.[which(complete.cases(.))] %>%
unique(.)
#aggiunta colonna dei giorni nella tabella di scontrini
df <- df %>%
mutate("GIORNO" = as_date(.$INIZIO.CICLO))
#aggiunta della bag-label
df <- df %>%
mutate("CHIAMATA" = factor(ifelse(.$GIORNO %in% coswin, 1, 0)))
# "BAG"=factor(cut.Date(df$GIORNO, breaks = "5 days",labels = F)))
ignore_columns <- c("TEST.DI.TENUTA","NUMERO.CICLO",
"INIZIO.CICLO")
df <- df[,-which(names(df) %in% ignore_columns)]
#trovo i giorni in cui ci sono state chiamate a coswin
giorni_guasti <- unique(df[which(df$CHIAMATA==1),which(colnames(df)=="GIORNO")])
#trovo le date dei 5 giorni precedenti ad ognuno dei giorni appena trovati
# attraverso la funzione backprop
backprop <- function(giorno){
as.list(seq(from=giorno-1,to =giorno-2,by = -1))
}
giorni_predittivi <- sapply(giorni_guasti, backprop)
# assegno flag=1 in corrispondenza dei giorni predittivi
df%<>%mutate(flag=ifelse(as.Date(df$GIORNO)%in%giorni_predittivi,1,0))
trainIndex <- createDataPartition(df$flag, p = .75,
list = FALSE,
times = 1)
nlp_training <- df[ trainIndex,]
nlp_testing <-  df[-trainIndex,]
clean_corpus <- function(corpus) {
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, stemDocument)
}
#Data preparation â€“ cleaning and standardizing text data####
descr_corpus_train <- VCorpus(VectorSource(nlp_training$testo))
descr_train_labels <- factor(nlp_training$flag)
descr_corpus_clean_train<-clean_corpus(descr_corpus_train)
descr_dtm_train <- DocumentTermMatrix(descr_corpus_clean_train)
descr_corpus_test <- VCorpus(VectorSource(nlp_testing$testo))
descr_test_labels <- factor(nlp_testing$flag)
descr_corpus_clean_test<-clean_corpus(descr_corpus_test)
descr_dtm_test <- DocumentTermMatrix(descr_corpus_clean_test)
descr_freq_words <- findFreqTerms(descr_dtm_train,lowfreq = 2)
descr_dtm_freq_train <- descr_dtm_train[, descr_freq_words]
descr_dtm_freq_test <- descr_dtm_test[, which(names(descr_dtm_test)%in%descr_freq_words)]
convert_counts <- function(x) {
x <- ifelse(x > 0, 1, 0)
}
descr_train <-as.data.frame(apply(descr_dtm_freq_train, MARGIN = 2, convert_counts))
descr_test <- as.data.frame(apply(descr_dtm_freq_test, MARGIN = 2, convert_counts))
# descr_classifier2 <-
#   naiveBayes(descr_train, descr_train_labels, laplace = 1,)
#
# descr_test_pred2 <- predict(descr_classifier2, descr_test)
#
# confusionMatrix(descr_test_pred2, descr_test_labels,
#                                 positive = "0")
fitControl <- trainControl(method = "repeatedcv",
number = 10,
classProbs = TRUE,
repeats = 3,
verboseIter=T,
allowParallel = T)
descr_train$TARGET <- factor(nlp_training$flag)
levels(descr_train$TARGET) <- c("neg", "pos")
levels(descr_test_labels) <- c("neg", "pos")
# train_pp_nozv <- preProcess(descr_train[ , -which(names(descr_train) %in% "TARGET")],
#            method = c("range","nzv"))
#
# train_pp_nozv
# train_pp_nozv <- predict(train_pp_nozv, newdata = descr_train[,-which(names(descr_train) %in% "TARGET")])
grid <- expand.grid(C = c(0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2,5))
train_pp_nozv$TARGET <- factor(nlp_training$flag)
levels(train_pp_nozv$TARGET) <- c("neg", "pos")
nlp_classifier <- caret::train(TARGET~.,
data=descr_train,
method="nb",
trControl = fitControl)
warnings
warnings()
descr_classifier2 <-
naiveBayes(descr_train, descr_train_labels, laplace = 1,)
descr_classifier2
descr_classifier2 <-
naiveBayes(descr_train[,-which(names(descr_train%in%"TARGET"))], descr_train_labels, laplace = 1)
descr_classifier2 <-
naiveBayes(descr_train[,-which(names(descr_train)%in%"TARGET"))], descr_train_labels, laplace = 1)
descr_classifier2 <-
naiveBayes(descr_train[,-which(names(descr_train)%in%"TARGET")], descr_train_labels, laplace = 1)
descr_test_pred2 <- predict(descr_classifier2, descr_test)
descr_test_pred2 <- predict(descr_classifier2, descr_test)
warnings()
descr_test <- as.data.frame(apply(descr_dtm_freq_test, MARGIN = 2, convert_counts))
descr_freq_words <- findFreqTerms(descr_dtm_train,lowfreq = 1)
descr_dtm_freq_train <- descr_dtm_train[, descr_freq_words]
descr_dtm_freq_test <- descr_dtm_test[, which(names(descr_dtm_test)%in%descr_freq_words)]
convert_counts <- function(x) {
x <- ifelse(x > 0, 1, 0)
}
descr_train <-as.data.frame(apply(descr_dtm_freq_train, MARGIN = 2, convert_counts))
descr_test <- as.data.frame(apply(descr_dtm_freq_test, MARGIN = 2, convert_counts))
View(descr_dtm_freq_test)
View(descr_dtm_freq_train)
View(descr_dtm_freq_test)
descr_freq_words <- findFreqTerms(descr_dtm_train,lowfreq = 10)
descr_dtm_freq_train <- descr_dtm_train[, descr_freq_words]
descr_dtm_freq_test <- descr_dtm_test[, which(names(descr_dtm_test)%in%descr_freq_words)]
convert_counts <- function(x) {
x <- ifelse(x > 0, 1, 0)
}
descr_train <-as.data.frame(apply(descr_dtm_freq_train, MARGIN = 2, convert_counts))
descr_test <- as.data.frame(apply(descr_dtm_freq_test, MARGIN = 2, convert_counts))
descr_classifier2 <-
naiveBayes(descr_train[,-which(names(descr_train)%in%"TARGET")], descr_train_labels, laplace = 1)
descr_test_pred2 <- predict(descr_classifier2, descr_test)
descr_dict <- findFreqTerms(descr_dtm_train, lowfreq = 1)
descr_dtm_test <- DocumentTermMatrix(descr_corpus_clean_test, list(dictionary=descr_dict))
descr_dtm_freq_train <- descr_dtm_train[, descr_freq_words]
descr_dtm_freq_test <- descr_dtm_test[, descr_freq_words]
convert_counts <- function(x) {
x <- ifelse(x > 0, 1, 0)
}
descr_train <-as.data.frame(apply(descr_dtm_freq_train, MARGIN = 2, convert_counts))
descr_test <- as.data.frame(apply(descr_dtm_freq_test, MARGIN = 2, convert_counts))
descr_classifier2 <-
naiveBayes(descr_train[,-which(names(descr_train)%in%"TARGET")], descr_train_labels, laplace = 1)
descr_classifier2 <-
naiveBayes(descr_train, descr_train_labels, laplace = 1)
descr_test_pred2 <- predict(descr_classifier2, descr_test)
#
confusionMatrix(descr_test_pred2, descr_test_labels,
#
confusionMatrix(descr_test_pred2, descr_test_labels,
positive = "0")
#
confusionMatrix(descr_test_pred2, descr_test_labels,
positive = "0")
#
confusionMatrix(descr_test_pred2, descr_test_labels,positive = "pos")
#
levels(descr_test_pred2) <- c("neg", "pos")
confusionMatrix(descr_test_pred2, descr_test_labels,positive = "pos")
fitControl <- trainControl(method = "repeatedcv",
number = 10,
classProbs = TRUE,
repeats = 3,
verboseIter=T,
allowParallel = T)
descr_train$TARGET <- factor(nlp_training$flag)
levels(descr_train$TARGET) <- c("neg", "pos")
levels(descr_test_labels) <- c("neg", "pos")
grid <- expand.grid(C = c(0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2,5))
train_pp_nozv$TARGET <- factor(nlp_training$flag)
levels(train_pp_nozv$TARGET) <- c("neg", "pos")
nlp_classifier <- caret::train(TARGET~.,
data=descr_train,
method="nb",
trControl = fitControl)
nlp_classifier <- caret::train(TARGET~.,
data=descr_train,
method="svmLinear",
trControl = fitControl)
nlp_classifier
predictions <- predict(nlp_classifier,newdata = descr_test)
confusionMatrix(predictions, descr_test_labels, positive = "pos")
fitControl <- trainControl(method = "repeatedcv",
number = 10,
classProbs = TRUE,
repeats = 3,
verboseIter=T,
allowParallel = T,
sampling = "SMOTE")
descr_train$TARGET <- factor(nlp_training$flag)
levels(descr_train$TARGET) <- c("neg", "pos")
levels(descr_test_labels) <- c("neg", "pos")
grid <- expand.grid(C = c(0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2,5))
train_pp_nozv$TARGET <- factor(nlp_training$flag)
levels(train_pp_nozv$TARGET) <- c("neg", "pos")
nlp_classifier <- caret::train(TARGET~.,
data=descr_train,
method="svmLinear",
trControl = fitControl)
fitControl <- trainControl(method = "repeatedcv",
number = 10,
classProbs = TRUE,
repeats = 3,
verboseIter=T,
allowParallel = T,
sampling = "up")
descr_train$TARGET <- factor(nlp_training$flag)
levels(descr_train$TARGET) <- c("neg", "pos")
levels(descr_test_labels) <- c("neg", "pos")
train_pp_nozv$TARGET <- factor(nlp_training$flag)
grid <- expand.grid(C = c(0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2,5))
levels(train_pp_nozv$TARGET) <- c("neg", "pos")
nlp_classifier <- caret::train(TARGET~.,
data=descr_train,
method="svmLinear",
trControl = fitControl)
nlp_classifier <- caret::train(TARGET~.,
data=descr_train,
method="nnet",
trControl = fitControl)
train_pp_nozv <- preProcess(descr_train[ , -which(names(descr_train) %in% "TARGET")],
method = c("range","nzv","PCA"))
train_pp_nozv <- preProcess(descr_train[ , -which(names(descr_train) %in% "TARGET")],
method = c("range","nzv","pca"))
train_pp_nozv
train_pp_nozv <- predict(train_pp_nozv, newdata = descr_train[,-which(names(descr_train) %in% "TARGET")])
grid <- expand.grid(C = c(0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2,5))
train_pp_nozv$TARGET <- factor(nlp_training$flag)
levels(train_pp_nozv$TARGET) <- c("neg", "pos")
nlp_classifier <- caret::train(TARGET~.,
data=train_pp_nozv,
method="nnet",
trControl = fitControl)
nlp_classifier <- caret::train(TARGET~.,
data=train_pp_nozv,
method="svmLinear",
trControl = fitControl)
nlp_classifier
predictions <- predict(nlp_classifier,newdata = descr_test)
predictions <- predict(nlp_classifier,newdata = descr_test)
train_pp_nozv <- preProcess(descr_train[ , -which(names(descr_train) %in% "TARGET")],
method = c("range","nzv"))
nlp_classifier <- caret::train(TARGET~.,
data=descr_train,
method="svmLinear",
trControl = fitControl)
descr_train[1:47] <- lapply(data[1:47], factor)
descr_train %<>%
mutate_each_(funs(factor(.)),c(1:47))
descr_train$TARGET <- factor(nlp_training$flag)
levels(descr_train$TARGET) <- c("neg", "pos")
levels(descr_test_labels) <- c("neg", "pos")
grid <- expand.grid(C = c(0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2,5))
train_pp_nozv$TARGET <- factor(nlp_training$flag)
levels(train_pp_nozv$TARGET) <- c("neg", "pos")
nlp_classifier <- caret::train(TARGET~.,
data=descr_train,
method="svmLinear",
trControl = fitControl)
dummies <- dummyVars(~., data = descr_train, fullRank = T)
dummied <- as.data.frame(predict(dummies, newdata = descr_train))
dummies <- dummyVars(~., data = descr_train, fullRank = F)
dummied <- as.data.frame(predict(dummies, newdata = descr_train))
dummies <- dummyVars(~., data = descr_train, fullRank = F)
dummied <- as.data.frame(predict(dummies, newdata = descr_train))
dummies <- dummyVars(~., data = descr_train, fullRank =T)
dummied <- as.data.frame(predict(dummies, newdata = descr_train))
