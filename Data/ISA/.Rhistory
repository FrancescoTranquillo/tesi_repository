bags <- list("INSTANCES"=bag, "FLAG"=1)
} else{
bags <- list("INSTANCES"=bag, "FLAG"=0)
}
})
table(factor(lapply(bags_label,function(bag){
s <- bag$FLAG
}) %>% do.call("rbind",.)))
freq_factor <- function(factor_column){
tt <- table(factor_column)
return(names(tt[which.max(tt)]))
}
unify_alarms <- function(alarm_column){
ifelse(1 %in% alarm_column,return(levels(alarm_column)[1]),return(levels(alarm_column)[2]))
}
meta <- function(df_instances){
temps_columns <- grep("temp\\.",names(df_instances))
alarm_columns <- grep("allarm|alarm",names(df_instances),ignore.case = T)
fct <- summarise_all(df_instances[,-c(temps_columns,alarm_columns)],funs(freq_factor(.)))
temps <- summarise_all(df_instances[,temps_columns],mean,na.rm=T)
alarms <- summarise_all(df_instances[,alarm_columns], funs(unify_alarms(.)))
return(cbind(fct,temps,alarms))
}
df_meta <- lapply(bags_label,FUN = function(bag){
if(bag$FLAG==1){
meta_example <- meta(bag$INSTANCES)
} else{
examples <- bag$INSTANCES
}
}) %>% do.call("rbind",.)
#aggiunta della bag-label
df <- df %>%
mutate("CHIAMATA" = factor(ifelse(.$GIORNO %in% coswin, 1, 0)),
"BAG"=factor(cut.Date(df$GIORNO, breaks = "3 days",labels = F)))
ignore_columns <- c("testo","TEST.DI.TENUTA","NUMERO.CICLO",
"INIZIO.CICLO", "GIORNO")
df_bagged <- df[,-which(names(df) %in% ignore_columns)]
#conversione multipla delle feature da int a fattori
cols = c(38:88, 2)
df_bagged[,cols] %<>% lapply(function(x) fct_explicit_na(as.character(x)))
df_bagged <- df_bagged[,-c(3,6:37)]
#divisione in lista di bags
bags <- as.list(split(df_bagged,f = df_bagged$BAG))
bags_label <- lapply(bags,function(bag){
if(1%in%bag$CHIAMATA){
bags <- list("INSTANCES"=bag, "FLAG"=1)
} else{
bags <- list("INSTANCES"=bag, "FLAG"=0)
}
})
table(factor(lapply(bags_label,function(bag){
s <- bag$FLAG
}) %>% do.call("rbind",.)))
freq_factor <- function(factor_column){
tt <- table(factor_column)
return(names(tt[which.max(tt)]))
}
unify_alarms <- function(alarm_column){
ifelse(1 %in% alarm_column,return(levels(alarm_column)[1]),return(levels(alarm_column)[2]))
}
meta <- function(df_instances){
temps_columns <- grep("temp\\.",names(df_instances))
alarm_columns <- grep("allarm|alarm",names(df_instances),ignore.case = T)
fct <- summarise_all(df_instances[,-c(temps_columns,alarm_columns)],funs(freq_factor(.)))
temps <- summarise_all(df_instances[,temps_columns],mean,na.rm=T)
alarms <- summarise_all(df_instances[,alarm_columns], funs(unify_alarms(.)))
return(cbind(fct,temps,alarms))
}
df_meta <- lapply(bags_label,FUN = function(bag){
if(bag$FLAG==1){
meta_example <- meta(bag$INSTANCES)
} else{
examples <- bag$INSTANCES
}
}) %>% do.call("rbind",.)
table(df_meta$CHIAMATA)
names(df_meta$CHIAMATA) <- "TARGET"
#one-hot encoding
dummies <- dummyVars(~.,data = df_meta)
library(caret)
#one-hot encoding
dummies <- dummyVars(~.,data = df_meta)
head(predict(dummies, newdata = df_meta))
df_meta <- df_meta[,-which(names(df_meta) %in% "BAG")]
#scaling
pp_df_no_nzv <- preProcess(df_meta[ , -which(names(df_meta) %in% "TARGET")],
method = c("range", "nzv","medianImpute" ))
pp_df_no_nzv
#scaling
pp_df_no_nzv <- preProcess(df_meta[ , -which(names(df_meta) %in% "TARGET")],
method = c("range", "nzv","medianImpute" ))
data <- predict(pp_df_no_nzv, newdata = df_meta[,-which(names(df_meta) %in% "TARGET")])
data$TARGET <- factor(df_meta$TARGET)
names(df_meta$CHIAMATA)
df_meta <- df_meta %>%
rename(CHIAMATA = TARGET)
df_meta <- df_meta %>%
rename("CHIAMATA" = "TARGET")
df_meta <- lapply(bags_label,FUN = function(bag){
if(bag$FLAG==1){
meta_example <- meta(bag$INSTANCES)
} else{
examples <- bag$INSTANCES
}
}) %>% do.call("rbind",.)
df_meta <- df_meta %>%
rename("CHIAMATA" = "TARGET")
names(df_meta)[names(df_meta) == "CHIAMATA"] <- "TARGET"
df_meta <- df_meta[,-which(names(df_meta) %in% "BAG")]
#scaling
pp_df_no_nzv <- preProcess(df_meta[ , -which(names(df_meta) %in% "TARGET")],
method = c("range", "nzv","medianImpute" ))
pp_df_no_nzv
data <- predict(pp_df_no_nzv, newdata = df_meta[,-which(names(df_meta) %in% "TARGET")])
data$TARGET <- factor(df_meta$TARGET)
levels(data$TARGET) <- c("neg", "pos")
df_meta$TARGET <- factor(df_meta$TARGET)
levels(df_meta$TARGET) <- c("neg", "pos")
#data splitting
trainIndex <- createDataPartition(data$TARGET, p = .8,
list = FALSE,
times = 1)
training <- data[ trainIndex,]
testing <-  data[-trainIndex,]
mod0 <- train(TARGET ~ ., data = training,
method = "svmLinear",
na.action = na.pass,
trControl = trainControl( verboseIter = T))
predictions <- predict(mod0, testing)
confusionMatrix(predictions, testing$TARGET,mode = "everything",positive = "pos")
mod0 <- train(TARGET ~ ., data = training,
method = "nnet",
na.action = na.pass,
trControl = trainControl( verboseIter = T))
predictions <- predict(mod0, testing)
confusionMatrix(predictions, testing$TARGET,mode = "everything",positive = "pos")
mod0
mod0 <- train(TARGET ~ ., data = training,
method = "nnet",
trControl = trainControl( verboseIter = T))
mod0 <- train(TARGET ~ ., data = training,
method = "rf",
trControl = trainControl( verboseIter = T))
mod0 <- train(TARGET ~ ., data = training,
method = "svmRadial",
trControl = trainControl( verboseIter = T))
predictions <- predict(mod0, testing)
confusionMatrix(predictions, testing$TARGET,mode = "everything",positive = "pos")
mod0
mod0 <- train(TARGET ~ ., data = training,
method = "bayesian",
trControl = trainControl( verboseIter = T))
#one-hot encoding
dummies <- dummyVars(~.,data = df_meta)
head(predict(dummies, newdata = df_meta))
dummied <- as.data.frame(predict(dummies, newdata = df_meta))
df_meta <- dummied
#scaling
pp_df_no_nzv <- preProcess(df_meta[ , -which(names(df_meta) %in% "TARGET")],
method = c("range", "nzv","medianImpute" ))
#scaling
pp_df_no_nzv <- preProcess(df_meta[ , -which(names(df_meta) %in% "TARGET")],
method = c("range", "nzv","medianImpute" ))
df_meta <- lapply(bags_label,FUN = function(bag){
if(bag$FLAG==1){
meta_example <- meta(bag$INSTANCES)
} else{
examples <- bag$INSTANCES
}
}) %>% do.call("rbind",.)
names(df_meta)[names(df_meta) == "CHIAMATA"] <- "TARGET"
df_meta <- df_meta[,-which(names(df_meta) %in% "BAG")]
#one-hot encoding
dummies <- dummyVars(TARGET~.,data = df_meta)
head(predict(dummies, newdata = df_meta))
dummied <- as.data.frame(predict(dummies, newdata = df_meta))
df_meta <- dummied
#scaling
pp_df_no_nzv <- preProcess(df_meta[ , -which(names(df_meta) %in% "TARGET")],
method = c("range", "nzv","medianImpute" ))
#one-hot encoding
dummies <- dummyVars(~.,data = df_meta,fullRank = T)
head(predict(dummies, newdata = df_meta))
dummied <- as.data.frame(predict(dummies, newdata = df_meta))
df_meta <- dummied
#scaling
pp_df_no_nzv <- preProcess(df_meta[ , -which(names(df_meta) %in% "TARGET")],
method = c("range", "nzv","medianImpute" ))
View(df_meta)
df_meta <- df_meta[,-which(names(df_meta) %in% "BAG")]
df_meta <- lapply(bags_label,FUN = function(bag){
if(bag$FLAG==1){
meta_example <- meta(bag$INSTANCES)
} else{
examples <- bag$INSTANCES
}
}) %>% do.call("rbind",.)
names(df_meta)[names(df_meta) == "CHIAMATA"] <- "TARGET"
df_meta <- df_meta[,-which(names(df_meta) %in% "BAG")]
df_meta$TARGET <- as.numeric(df_meta$TARGET)
#one-hot encoding
dummies <- dummyVars(~.,data = df_meta,fullRank = T)
head(predict(dummies, newdata = df_meta))
dummied <- as.data.frame(predict(dummies, newdata = df_meta))
df_meta <- dummied
#scaling
pp_df_no_nzv <- preProcess(df_meta[ , -which(names(df_meta) %in% "TARGET")],
method = c("range", "nzv","medianImpute" ))
pp_df_no_nzv
data <- predict(pp_df_no_nzv, newdata = df_meta[,-which(names(df_meta) %in% "TARGET")])
data$TARGET <- factor(df_meta$TARGET)
levels(data$TARGET) <- c("neg", "pos")
df_meta$TARGET <- factor(df_meta$TARGET)
levels(df_meta$TARGET) <- c("neg", "pos")
#data splitting
trainIndex <- createDataPartition(data$TARGET, p = .8,
list = FALSE,
times = 1)
training <- data[ trainIndex,]
testing <-  data[-trainIndex,]
mod0 <- train(TARGET ~ ., data = training,
method = "bayesian",
trControl = trainControl( verboseIter = T))
mod0 <- train(TARGET ~ ., data = training,
method = "svmLinear",
trControl = trainControl( verboseIter = T))
predictions <- predict(mod0, testing)
confusionMatrix(predictions, testing$TARGET,mode = "everything",positive = "pos")
df_meta <- lapply(bags_label,FUN = function(bag){
if(bag$FLAG==1){
meta_example <- meta(bag$INSTANCES)
} else{
examples <- bag$INSTANCES
}
}) %>% do.call("rbind",.)
names(df_meta)[names(df_meta) == "CHIAMATA"] <- "TARGET"
df_meta <- df_meta[,-which(names(df_meta) %in% "BAG")]
df_meta$TARGET <- as.numeric(df_meta$TARGET)
#one-hot encoding
dummies <- dummyVars(TARGET~TIPO.CICLO.,data = df_meta,fullRank = T)
#one-hot encoding
dummies <- dummyVars(TARGET~TIPO.CICLO,data = df_meta,fullRank = T)
head(predict(dummies, newdata = df_meta))
dummied <- as.data.frame(predict(dummies, newdata = df_meta))
df_meta <- dummied
#scaling
pp_df_no_nzv <- preProcess(df_meta[ , -which(names(df_meta) %in% "TARGET")],
method = c("range", "nzv","medianImpute" ))
#one-hot encoding
dummies <- dummyVars(~TIPO.CICLO,data = df_meta,fullRank = T)
#one-hot encoding
dummies <- dummyVars(~TIPO.CICLO+TARGET,data = df_meta,fullRank = T)
df_meta <- lapply(bags_label,FUN = function(bag){
if(bag$FLAG==1){
meta_example <- meta(bag$INSTANCES)
} else{
examples <- bag$INSTANCES
}
}) %>% do.call("rbind",.)
names(df_meta)[names(df_meta) == "CHIAMATA"] <- "TARGET"
df_meta <- df_meta[,-which(names(df_meta) %in% "BAG")]
df_meta_pp <- df_meta[,-which(names(df_meta) %in% "BAG")]
df_meta$TARGET <- as.numeric(df_meta$TARGET)
df_meta_pp$TARGET <- as.numeric(df_meta_pp$TARGET)
df_meta_pp <- df_meta[,-which(names(df_meta) %in% "BAG")]
df_meta_pp$TARGET <- as.numeric(df_meta_pp$TARGET)
df_meta <- lapply(bags_label,FUN = function(bag){
if(bag$FLAG==1){
meta_example <- meta(bag$INSTANCES)
} else{
examples <- bag$INSTANCES
}
}) %>% do.call("rbind",.)
names(df_meta)[names(df_meta) == "CHIAMATA"] <- "TARGET"
df_meta_pp <- df_meta[,-which(names(df_meta) %in% "BAG")]
df_meta_pp$TARGET <- as.numeric(df_meta_pp$TARGET)
#one-hot encoding
dummies <- dummyVars(~TIPO.CICLO,data = df_meta_pp,fullRank = T)
head(predict(dummies, newdata = df_meta_pp))
df_meta_pp <- df_meta[,-which(names(df_meta) %in% "BAG")]
df_meta_pp$TARGET <- as.numeric(df_meta_pp$TARGET)
#one-hot encoding
dummies <- dummyVars(~.,data = df_meta_pp,fullRank = T)
head(predict(dummies, newdata = df_meta_pp))
dummied <- as.data.frame(predict(dummies, newdata = df_meta_pp))
df_meta_pp <- dummied
#scaling
pp_df_no_nzv <- preProcess(df_meta_pp[ , -which(names(df_meta_pp) %in% "TARGET")],
method = c("range", "nzv","medianImpute" ))
pp_df_no_nzv
data <- predict(pp_df_no_nzv, newdata = df_meta_pp[,-which(names(df_meta_pp) %in% "TARGET")])
View(data)
data$TARGET <- factor(df_meta_pp$TARGET)
levels(data$TARGET) <- c("neg", "pos")
df_meta_pp$TARGET <- factor(df_meta_pp$TARGET)
levels(df_meta_pp$TARGET) <- c("neg", "pos")
#data splitting
trainIndex <- createDataPartition(data$TARGET, p = .8,
list = FALSE,
times = 1)
training <- data[ trainIndex,]
testing <-  data[-trainIndex,]
mod0 <- train(TARGET ~ ., data = training,
method = "svmLinear",
trControl = trainControl( verboseIter = T))
predictions <- predict(mod0, testing)
confusionMatrix(predictions, testing$TARGET,mode = "everything",positive = "pos")
table(training$TARGET)
mod0 <- train(TARGET ~ ., data = training,
method = "nnet",
trControl = trainControl( verboseIter = T))
#scaling
pp_df_no_nzv <- preProcess(df_meta_pp[ , -which(names(df_meta_pp) %in% "TARGET")],
method = c("range", "nzv" ))
pp_df_no_nzv
#scaling
pp_df_no_nzv <- preProcess(df_meta_pp[ , -which(names(df_meta_pp) %in% "TARGET")],
method = c("range"))
pp_df_no_nzv
data <- predict(pp_df_no_nzv, newdata = df_meta_pp[,-which(names(df_meta_pp) %in% "TARGET")])
data$TARGET <- factor(df_meta_pp$TARGET)
levels(data$TARGET) <- c("neg", "pos")
df_meta_pp$TARGET <- factor(df_meta_pp$TARGET)
levels(df_meta_pp$TARGET) <- c("neg", "pos")
#data splitting
trainIndex <- createDataPartition(data$TARGET, p = .8,
list = FALSE,
times = 1)
training <- data[ trainIndex,]
testing <-  data[-trainIndex,]
mod0 <- train(TARGET ~ ., data = training,
method = "nnet",
trControl = trainControl( verboseIter = T))
mod0 <- train(TARGET ~ ., data = training,
method = "nnet",
trControl = trainControl( verboseIter = T))
#scaling
pp_df_no_nzv <- preProcess(df_meta_pp[ , -which(names(df_meta_pp) %in% "TARGET")],
method = c("range"))
pp_df_no_nzv
data <- predict(pp_df_no_nzv, newdata = df_meta_pp[,-which(names(df_meta_pp) %in% "TARGET")])
data$TARGET <- factor(df_meta_pp$TARGET)
levels(data$TARGET) <- c("neg", "pos")
df_meta_pp$TARGET <- factor(df_meta_pp$TARGET)
levels(df_meta_pp$TARGET) <- c("neg", "pos")
#data splitting
trainIndex <- createDataPartition(data$TARGET, p = .8,
list = FALSE,
times = 1)
training <- data[ trainIndex,]
testing <-  data[-trainIndex,]
mod0 <- train(TARGET ~ ., data = training,
method = "nnet",
trControl = trainControl( verboseIter = T))
sum(is.na(training))
#scaling
pp_df_no_nzv <- preProcess(df_meta_pp[ , -which(names(df_meta_pp) %in% "TARGET")],
method = c("range","knnImpute"))
pp_df_no_nzv
data <- predict(pp_df_no_nzv, newdata = df_meta_pp[,-which(names(df_meta_pp) %in% "TARGET")])
data$TARGET <- factor(df_meta_pp$TARGET)
levels(data$TARGET) <- c("neg", "pos")
df_meta_pp$TARGET <- factor(df_meta_pp$TARGET)
levels(df_meta_pp$TARGET) <- c("neg", "pos")
#data splitting
trainIndex <- createDataPartition(data$TARGET, p = .8,
list = FALSE,
times = 1)
training <- data[ trainIndex,]
testing <-  data[-trainIndex,]
mod0 <- train(TARGET ~ ., data = training,
method = "nnet",
trControl = trainControl( verboseIter = T))
#scaling
pp_df_no_nzv <- preProcess(df_meta_pp[ , -which(names(df_meta_pp) %in% "TARGET")],
method = c("range","medianImpute"))
pp_df_no_nzv
data <- predict(pp_df_no_nzv, newdata = df_meta_pp[,-which(names(df_meta_pp) %in% "TARGET")])
data$TARGET <- factor(df_meta_pp$TARGET)
levels(data$TARGET) <- c("neg", "pos")
df_meta_pp$TARGET <- factor(df_meta_pp$TARGET)
levels(df_meta_pp$TARGET) <- c("neg", "pos")
#data splitting
trainIndex <- createDataPartition(data$TARGET, p = .8,
list = FALSE,
times = 1)
training <- data[ trainIndex,]
testing <-  data[-trainIndex,]
mod0 <- train(TARGET ~ ., data = training,
method = "nnet",
trControl = trainControl( verboseIter = T))
varImp(mod0)
mod0
predictions <- predict(mod0, testing)
confusionMatrix(predictions, testing$TARGET,mode = "everything",positive = "pos")
plot(mod0)
plot(mod0)
plot(mod0)
plot(mod0)
confusionMatrix(predictions, testing$TARGET,mode = "everything",positive = "pos")
plot(mod0)
barplot(mod0)
plot(mod0)
saveRDS(mod0, "model0.rds")
my_model <- readRDS("model.rds")
my_model <- readRDS(here("model.rds"))
here("model.rds")
my_model <- readRDS(here("model.rds"))
mod0
mod0 <- train(TARGET ~ ., data = training,
method = "glm",
trControl = trainControl( verboseIter = T))
predictions <- predict(mod0, testing)
confusionMatrix(predictions, testing$TARGET,mode = "everything",positive = "pos")
mod0 <- train(TARGET ~ ., data = training,
method = "glm",
trControl = trainControl( verboseIter = T,sampling = "SMOTE"))
mod0 <- train(TARGET ~ ., data = training,
method = "glm",
trControl = trainControl( verboseIter = T,sampling = "smote"))
predictions <- predict(mod0, testing)
confusionMatrix(predictions, testing$TARGET,mode = "everything",positive = "pos")
mod0 <- train(TARGET ~ ., data = training,
method = "svmLinear",
trControl = trainControl( verboseIter = T,sampling = "smote"))
predictions <- predict(mod0, testing)
confusionMatrix(predictions, testing$TARGET,mode = "everything",positive = "pos")
mod0 <- train(TARGET ~ ., data = training,
method = "svmRadial",
trControl = trainControl( verboseIter = T,sampling = "smote"))
predictions <- predict(mod0, testing)
confusionMatrix(predictions, testing$TARGET,mode = "everything",positive = "pos")
mod0 <- train(TARGET ~ ., data = training,
method = "svmRadial",
trControl = trainControl( verboseIter = T,
sampling = "smote",
method = "repeatedcv",
number = 5,
repeats = 5))
plot(mod0)
plot(mod0)
predictions <- predict(mod0, testing)
confusionMatrix(predictions, testing$TARGET,mode = "everything",positive = "pos")
mod0 <- train(TARGET ~ ., data = training,
method = "gbm",
trControl = trainControl( verboseIter = T,
sampling = "smote",
method = "repeatedcv",
number = 5,
repeats = 5))
mod0 <- train(TARGET ~ ., data = training,
method = "lgm",
trControl = trainControl( verboseIter = T,
sampling = "smote",
method = "repeatedcv",
number = 5,
repeats = 5))
mod0 <- train(TARGET ~ ., data = training,
method = "svmLinear2",
trControl = trainControl( verboseIter = T,
sampling = "smote",
method = "repeatedcv",
number = 5,
repeats = 5))
predictions <- predict(mod0, testing)
confusionMatrix(predictions, testing$TARGET,mode = "everything",positive = "pos")
mod0 <- train(TARGET ~ ., data = training,
method = "svmRadialCost",
trControl = trainControl( verboseIter = T,
sampling = "smote",
method = "repeatedcv",
number = 5,
repeats = 5))
predictions <- predict(mod0, testing)
confusionMatrix(predictions, testing$TARGET,mode = "everything",positive = "pos")
mod0 <- train(TARGET ~ ., data = training,
method = "glm",
trControl = trainControl( verboseIter = T,
sampling = "smote",
method = "repeatedcv",
number = 5,
repeats = 5))
predictions <- predict(mod0, testing)
confusionMatrix(predictions, testing$TARGET,mode = "everything",positive = "pos")
mod0 <- train(TARGET ~ ., data = training,
method = "rf",
trControl = trainControl( verboseIter = T,
sampling = "smote",
method = "repeatedcv",
number = 5,
repeats = 5))
predictions <- predict(mod0, testing)
confusionMatrix(predictions, testing$TARGET,mode = "everything",positive = "pos")
mod0 <- train(TARGET ~ ., data = training,
method = "rf",
trControl = trainControl( verboseIter = T,
sampling = "down",
method = "repeatedcv",
number = 5,
repeats = 5))
predictions <- predict(mod0, testing)
confusionMatrix(predictions, testing$TARGET,mode = "everything",positive = "pos")
mod0 <- train(TARGET ~ ., data = training,
method = "gbm",
trControl = trainControl( verboseIter = T,
sampling = "up",
method = "repeatedcv",
number = 5,
repeats = 5))
predictions <- predict(mod0, testing)
confusionMatrix(predictions, testing$TARGET,mode = "everything",positive = "pos")
plot(mod0)
