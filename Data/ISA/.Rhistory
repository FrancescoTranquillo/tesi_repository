color=stb$nodes$nodecolor,
line = list(color = "black",
width = 0.5)
),
link = list(
source = stb$links$source,
target = stb$links$target,
value = stb$links$value,
color=stb$links$linkcolor
)
)
p
stb <- sankey_table(df[which(df$ESITO.CICLO%in%"CICLO IRREGOLARE"&df$CATEGORIA%in%"BRONCOSCOPIO")],
c("CATEGORIA","MATRICOLA"))
p <- plot_ly(
type = "sankey",
orientation = "h",
arrangement = 'freeform',
node = list(
label=stb$nodes$actors,
thickness = 15,
pad=10,
color=stb$nodes$nodecolor,
line = list(color = "black",
width = 0.5)
),
link = list(
source = stb$links$source,
target = stb$links$target,
value = stb$links$value,
color=stb$links$linkcolor
)
)
stb <- sankey_table(df[which(df$ESITO.CICLO%in%"CICLO IRREGOLARE"&df$CATEGORIA%in%"BRONCOSCOPIO"),],
c("CATEGORIA","MATRICOLA"))
p <- plot_ly(
type = "sankey",
orientation = "h",
arrangement = 'freeform',
node = list(
label=stb$nodes$actors,
thickness = 15,
pad=10,
color=stb$nodes$nodecolor,
line = list(color = "black",
width = 0.5)
),
link = list(
source = stb$links$source,
target = stb$links$target,
value = stb$links$value,
color=stb$links$linkcolor
)
)
p
stb <- sankey_table(df[which(df$ESITO.CICLO%in%"CICLO IRREGOLARE"&df$CATEGORIA%in%"BRONCOSCOPIO"),],
c("CATEGORIA","MATRICOLA","ALLARMI"))
p <- plot_ly(
type = "sankey",
orientation = "h",
arrangement = 'freeform',
node = list(
label=stb$nodes$actors,
thickness = 15,
pad=10,
color=stb$nodes$nodecolor,
line = list(color = "black",
width = 0.5)
),
link = list(
source = stb$links$source,
target = stb$links$target,
value = stb$links$value,
color=stb$links$linkcolor
)
)
p
stb <- sankey_table(df[which(df$ESITO.CICLO%in%"CICLO IRREGOLARE"&df$CATEGORIA%in%"BRONCOSCOPIO"),],
c("ALLARMI","MATRICOLA"))
p <- plot_ly(
type = "sankey",
orientation = "h",
arrangement = 'freeform',
node = list(
label=stb$nodes$actors,
thickness = 15,
pad=10,
color=stb$nodes$nodecolor,
line = list(color = "black",
width = 0.5)
),
link = list(
source = stb$links$source,
target = stb$links$target,
value = stb$links$value,
color=stb$links$linkcolor
)
)
p
stb <- sankey_table(df[which(df$ESITO.CICLO%in%"CICLO IRREGOLARE"&df$CATEGORIA%in%"BRONCOSCOPIO"&df$ALLARMI!%in%"Nessun allarme rilevato"),],
c("ALLARMI","MATRICOLA"))
stb <- sankey_table(df[which(df$ESITO.CICLO%in%"CICLO IRREGOLARE"&df$CATEGORIA%in%"BRONCOSCOPIO"&!df$ALLARMI%in%"Nessun allarme rilevato"),],
c("ALLARMI","MATRICOLA"))
p <- plot_ly(
type = "sankey",
orientation = "h",
arrangement = 'freeform',
node = list(
label=stb$nodes$actors,
thickness = 15,
pad=10,
color=stb$nodes$nodecolor,
line = list(color = "black",
width = 0.5)
),
link = list(
source = stb$links$source,
target = stb$links$target,
value = stb$links$value,
color=stb$links$linkcolor
)
)
p
mtcars
ezsankey <- function(tab,nome){
stb <- sankey_table(tab,nome)
p <- plot_ly(
type = "sankey",
orientation = "h",
arrangement = 'freeform',
node = list(
label=stb$nodes$actors,
thickness = 15,
pad=10,
color=stb$nodes$nodecolor,
line = list(color = "black",
width = 0.5)
),
link = list(
source = stb$links$source,
target = stb$links$target,
value = stb$links$value,
color=stb$links$linkcolor
)
)
return(p)
}
ezsankey(df,c("ESITO.CICLO", "MATRICOLA", "ALLARMI","TIPO.CICLO"))
ezsankey(df[!which(df$ALLARMI%in%"Nessun allarme rilevato"),],c("ESITO.CICLO", "MATRICOLA", "ALLARMI","TIPO.CICLO"))
ezsankey(df[-which(df$ALLARMI%in%"Nessun allarme rilevato"),],c("ESITO.CICLO", "MATRICOLA", "ALLARMI","TIPO.CICLO"))
ezsankey(df[-which(df$ALLARMI%in%"Nessun allarme rilevato"),],c("TIPO.CICLO","ESITO.CICLO", "MATRICOLA", "ALLARMI"))
ezsankey(df[-which(df$ALLARMI%in%"Nessun allarme rilevato"),],c("TIPO.CICLO","ESITO.CICLO", "MATRICOLA", "ALLARMI"))
ezsankey(df[-which(df$ALLARMI%in%"Nessun allarme rilevato"),],c("ESITO.CICLO", "MATRICOLA", "ALLARMI"))
ezsankey(df[which(!df$ALLARMI%in%"Nessun allarme rilevato"&df$CATEGORIA%in%c("BRONCOSCOPIO","DUODENOSCOPIO"),],c("ESITO.CICLO", "MATRICOLA", "ALLARMI"))
ezsankey(df[which(!df$ALLARMI%in%"Nessun allarme rilevato"&df$CATEGORIA%in%c("BRONCOSCOPIO","DUODENOSCOPIO")),],c("ESITO.CICLO", "MATRICOLA", "ALLARMI"))
ezsankey(df[which(!df$ALLARMI%in%"Nessun allarme rilevato"&df$CATEGORIA%in%c("BRONCOSCOPIO","DUODENOSCOPIO")),],
c("ESITO.CICLO", "CATEGORIA","MATRICOLA", "ALLARMI"))
}
ezsankey <- function(tab,nome){
stb <- sankey_table(tab,nome)
p <- plot_ly(
type = "sankey",
orientation = "h",
arrangement = 'freeform',
node = list(
label=stb$nodes$actors,
thickness = 15,
pad=10,
color=stb$nodes$nodecolor,
line = list(color = "black",
width = 0.5)
),
link = list(
source = stb$links$source,
target = stb$links$target,
value = stb$links$value,
color=stb$links$linkcolor
)
) %>%
layout(font = list(size = 4))
return(p)
}
ezsankey(df[which(!df$ALLARMI%in%"Nessun allarme rilevato"&df$CATEGORIA%in%c("BRONCOSCOPIO","DUODENOSCOPIO")),],
c("ESITO.CICLO", "CATEGORIA","MATRICOLA", "ALLARMI"))
ezsankey <- function(tab,nome){
stb <- sankey_table(tab,nome)
p <- plot_ly(
type = "sankey",
orientation = "h",
arrangement = 'freeform',
node = list(
label=stb$nodes$actors,
thickness = 15,
pad=10,
color=stb$nodes$nodecolor,
line = list(color = "black",
width = 0.5)
),
link = list(
source = stb$links$source,
target = stb$links$target,
value = stb$links$value,
color=stb$links$linkcolor
)
) %>%
layout(font = list(size = 14))
return(p)
}
ezsankey(df[which(!df$ALLARMI%in%"Nessun allarme rilevato"&df$CATEGORIA%in%c("BRONCOSCOPIO","DUODENOSCOPIO")),],
c("ESITO.CICLO", "CATEGORIA","MATRICOLA", "ALLARMI"))
dim(sankey_list$links)
product(dim(sankey_list$links))
apply(dim(sankey_list$links),*)
sapply(dim(sankey_list$links),*)
sankey_table <- function(tab,nome){
library(rlist)
library(viridis)
pairs <- cbind(nome[-length(nome)], nome[-1])
dftot <- apply(pairs, MARGIN =1, function(j) plyr::count(tab,j)) %>%
lapply(.,setNames, nm=c("source","target", "value")) %>%
do.call("rbind",.)
dftot$source <- as.character(dftot$source)
dftot$target <- as.character(dftot$target)
source <- dftot$source
target <- dftot$target
value <- dftot$value
actors <- unique(c(dftot$source, dftot$target))
l <- length(actors)
actors_t <- data.frame("actors" = actors, "id" = 0:(l - 1))
convert_name_id <- function(node_name) {
actors_t$id[which(actors_t$actors %in% node_name)]
}
sankey_list <-
list(
nodes = data.frame("actors" = factor(actors_t$actors)),
links = data.frame(
"source" = sapply(source, convert_name_id, USE.NAMES = F),
"target" = sapply(target, convert_name_id, USE.NAMES = F),
"value" = value
)
)
sankey_list$nodes <- mutate(sankey_list$nodes,"nodecolor" = viridis(nlevels(sankey_list$nodes$actors), alpha = 0.6, option ="viridis"))
sankey_list$links <- mutate(sankey_list$links,"linkcolor" = viridis((nrow(sankey_list$links)*ncol(sankey_list$links)), alpha = 0.2, option ="viridis"))
return(sankey_list)
}
stb <- sankey_table(df[which(df$ESITO.CICLO%in%"CICLO IRREGOLARE"&df$CATEGORIA%in%"BRONCOSCOPIO"&!df$ALLARMI%in%"Nessun allarme rilevato"),],
c("ALLARMI","MATRICOLA"))
p <- plot_ly(
type = "sankey",
orientation = "h",
arrangement = 'freeform',
node = list(
label=stb$nodes$actors,
thickness = 15,
pad=10,
color=stb$nodes$nodecolor,
line = list(color = "black",
width = 0.5)
),
link = list(
source = stb$links$source,
target = stb$links$target,
value = stb$links$value,
color=stb$links$linkcolor
)
)
stb <- sankey_table(df[which(df$ESITO.CICLO%in%"CICLO IRREGOLARE"&df$CATEGORIA%in%"BRONCOSCOPIO"&!df$ALLARMI%in%"Nessun allarme rilevato"),],
c("ALLARMI","MATRICOLA"))
nrow(sankey_list$links)*ncol(sankey_list$links)
View(sankey_list)
shiny::runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
shiny::runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
# library(here)
library(pbapply)
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
unloadNamespace()
rm(list=ls())
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(here)
library(shiny)
library(shinydashboard)
library(shinyalert)
library(shinyWidgets)
library(DT)
library(esquisse)
library(lubridate)
library(shinyBS)
library(plotly)
library(readr)
library(arm)
library(caret)
library(naivebayes)
library(dygraphs)
library(xts)
library(plyr)
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
rds <- as.list(list.files(here(),"*7_*"))
?list.files
runApp('ISA-test')
rds <- as.list(list.files(here(),"*7_*"))
runApp('ISA-test')
rds <- as.list(list.files(here::here(),"*7_*"))
modelli <- lapply(rds,function(x) readRDS(x))
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
shiny::runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
shiny::runApp('ISA-test')
runApp('ISA-test')
runApp('ISA-test')
shiny::runApp('ISA-test')
shiny::runApp('ISA-test')
matrix <- as.matrix()
matrix <- as.matrix([2,3,3])
as.matrix(x = 3)
matrix <- as.matrix(c(2,3,3))
matrix
matrix <- as.matrix(randu(2,3,3))
randu
shiny::runApp('ISA-test')
runApp('ISA-test')
library(here)
library(tidyverse)
library(ggplot2)
library(esquisse)
list.files("../")
df <- read.csv("../Prestazioni_Ambulatoriali.csv")
df_asstvim <- df %>% .[which(.$ENTE=="ASST DI VIMERCATE"),]
table(df$PREST_AMBLE)
df_asstvim_endo <- df_asstvim %>%
group_by(.$PREST_AMBLE)
View(df_asstvim_endo)
10330+1760
10330+1770
df_asstvim_endo <- df_asstvim %>%
filter(.$PREST_AMBLE=="endo")
df_asstvim_endo <- df_asstvim %>%
filter(PREST_AMBLE=="endoscopia")
df_asstvim_endo <- df_asstvim %>%
filter(PREST_AMBLE %in%"endoscopia")
df_asstvim_endo <- df_asstvim %>%
filter( "endoscopia"%in%PREST_AMBLE)
df_asstvim_endo <- df_asstvim %>%
filter( "endo"%in%PREST_AMBLE)
df_asstvim_endo <- df_asstvim %>%
.[PREST_AMBLE=="endoscopia"]
df_asstvim_endo <- df_asstvim %>%
.[which(.$PREST_AMBLE=="endoscopia"),]
View(df_asstvim)
df_asstvim_endo <- df_asstvim %>%
.[which(.$PREST_AMBLE%in%"endoscop"),]
df_asstvim$PREST_AMBLE %in% "endoscop"
df_asstvim$PREST_AMBLE %in% "endoscop"==T
table(df_asstvim$PREST_AMBLE %in% "endoscop")
df_asstvim_endo <- df_asstvim %>%
.[which(.$PREST_AMBLE%in%"ENDOSCO"),]
table(df_asstvim$PREST_AMBLE %in% "ENDOSCOP")
table(df_asstvim$BRANCA_REGLE %in% "ENDOSCOP")
table(df_asstvim$BRANCA_REGLE %in% "ENDOSCOPIA")
grep("endoscop" ,df_asstvim$PREST_AMBLE,ignore.case = T,fixed = F)
df_asstvim_endo <- df_asstvim %>%
.[grep("endoscop" ,df_asstvim$PREST_AMBLE,ignore.case = T,fixed = F),]
View(df_asstvim_endo)
esquisser()
ggplot(data = df_asstvim_endo) +
aes(x = PREST_AMBLE, y = N_PREST) +
geom_boxplot(fill = "#0c4c8a") +
theme_minimal() +
coord_flip()
ggplot(data = df_asstvim_endo) +
aes(x = PREST_AMBLE, y = N_PREST) +
geom_barplot(fill = "#0c4c8a") +
theme_minimal() +
coord_flip()
ggplot(data = df_asstvim_endo) +
aes(x = PREST_AMBLE, y = N_PREST) +
geom_bar(fill = "#0c4c8a") +
theme_minimal() +
coord_flip()
ggplot(data = df_asstvim_endo) +
aes(x = PREST_AMBLE, y = N_PREST) +
geom_bar(fill = "#0c4c8a",stat = sum) +
theme_minimal() +
coord_flip()
View(df_asstvim_endo)
df_asstvim_endo <- df_asstvim %>%
.[grep("endoscop" ,df_asstvim$PREST_AMBLE,ignore.case = T,fixed = F),] %>%
.[which(.$TIPO_PREST=="AMB"),]
df_asstvim_endo <- df_asstvim %>%
.[grep("endoscop" ,df_asstvim$PREST_AMBLE,ignore.case = T,fixed = F),] %>%
.[which(.$TIPO_PREST=="AMB"),c(20,22)]
esquisser()
ggplot(data = df_asstvim_endo) +
aes(x = PREST_AMBLE, y = N_PREST) +
geom_bar(fill = "#0c4c8a",stat = sum) +
theme_minimal() +
coord_flip()
ggplot(data = df_asstvim_endo) +
aes(x = PREST_AMBLE, y = N_PREST) +
geom_bar(fill = "#0c4c8a",stat = "sum") +
theme_minimal() +
coord_flip()
df_asstvim_endo <- df_asstvim %>%
.[grep("endoscop" ,df_asstvim$PREST_AMBLE,ignore.case = T,fixed = F),] %>%
.[which(.$TIPO_PREST=="AMB"),c(20,22)] %>%
filter(N_PREST>500)
ggplot(data = df_asstvim_endo) +
aes(x = PREST_AMBLE, y = N_PREST) +
geom_bar(fill = "#0c4c8a",stat = "sum") +
theme_minimal() +
coord_flip()
df_asstvim_endo <- df_asstvim %>%
.[grep("endoscop" ,df_asstvim$PREST_AMBLE,ignore.case = T,fixed = F),] %>%
.[which(.$TIPO_PREST=="AMB"),c(20,22)] %>%
filter(N_PREST>100)
ggplot(data = df_asstvim_endo) +
aes(x = PREST_AMBLE, y = N_PREST) +
geom_bar(fill = "#0c4c8a",stat = "sum") +
theme_minimal() +
coord_flip()
remotes::install_github("tylermorganwall/rayshader")
library(rayshader)
install_packages("tylermorganwall/rayshader")
install_packages("rayshader")
installpackages("rayshader")
install.packages("rayshader")
library(rayshader)
gg <- ggplot(data = df_asstvim_endo) +
aes(x = PREST_AMBLE, y = N_PREST) +
geom_bar(fill = "#0c4c8a",stat = "sum") +
theme_minimal() +
coord_flip()
plot_gg(gg_nc, multicore = TRUE, width = 6 ,height=2.7, fov = 70)
library(rayshader)
plot_gg(gg_nc, multicore = TRUE, width = 6 ,height=2.7, fov = 70)
render_depth(focallength=100,focus=0.72)
df_asstvim_endo <- df_asstvim %>%
.[grep("endoscop" ,df_asstvim$PREST_AMBLE,ignore.case = T,fixed = F),] %>%
.[which(.$TIPO_PREST=="AMB"),20:22] %>%
filter(N_PREST>100)
plot_gg(ggvolcano, multicore = TRUE, raytrace = TRUE, width = 7, height = 4,
scale = 300, windowsize = c(1400, 866), zoom = 0.6, phi = 30, theta = 30)
library(rayshader)
mtplot = ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, color = cyl)) +
scale_color_continuous(limits = c(0, 8))
par(mfrow = c(1, 2))
plot_gg(mtplot, width = 3.5, raytrace = FALSE, preview = TRUE)
plot_gg(mtplot, width = 3.5, multicore = TRUE, windowsize = c(800, 800),
zoom = 0.85, phi = 35, theta = 30, sunangle = 225, soliddepth = -100)
render_snapshot(clear = TRUE)
install.packages("rayshader")
mtplot = ggplot(mtcars) +
geom_point(aes(x = mpg, y = disp, color = cyl)) +
scale_color_continuous(limits = c(0, 8))
par(mfrow = c(1, 2))
plot_gg(mtplot, width = 3.5, raytrace = FALSE, preview = TRUE)
plot_gg(mtplot, width = 3.5, multicore = TRUE, windowsize = c(800, 800),
zoom = 0.85, phi = 35, theta = 30, sunangle = 225, soliddepth = -100)
render_snapshot(clear = TRUE)
install.packages(Rtools)
install.packages("Rtools")
install.packages("ggmaps")
install.packages("ggmap")
library(ggmap)
qmap(lombardia)
qmap("lombardia")
?register_google
register_google()
register_google("AIzaSyDBYPURbNjr6vgwyguzXtpHe4Bz_xczKmk")
qmap("lombardia")
