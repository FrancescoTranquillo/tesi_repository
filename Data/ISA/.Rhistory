scontrino_footer
scontrino_footer-1
scontrino_footer%<>%.[-last(.)]
last(scontrino_footer)
scontrino_footer%<>%.[-last()]
scontrino_footer%<>%.[-last(.)]
scontrino_footer <- scontrino_footer %>% .[-last(.)]
scontrino_footer <- scontrino_footer[-last(scontrino_footer)]
scontrino_footer <- scontrino_footer[-last(scontrino_footer),]
scontrino_footer%<>%.[-length(.)]
scontrino_footer
scontrino_header
scontrino_footer
scontrino_header <-
na.omit(gsub(scontrino, pattern = "\\d\\d:\\d\\d:\\d\\d .*", replacement = NA)) %>%
.[5:(length(.) - 1)]
scontrino_header
scontrino_regolare <-
na.omit(str_extract(scontrino, pattern = "\\d\\d:\\d\\d:\\d\\d .*")) %>%
gsub("(\\d\\d:){2,}\\d\\d ", "", .) %>% last(.)
sclean_header <- last(scontrino_header)
scontrino_regolare <-
na.omit(str_extract(scontrino, pattern = "\\d\\d:\\d\\d:\\d\\d .*")) %>%
gsub("(\\d\\d:){2,}\\d\\d ", "", .) %>% last(.)
scontrino_footer <-
na.omit(str_extract(scontrino, pattern = "\\d\\d:\\d\\d:\\d\\d .*")) %>%
.[1:(length(.) - 1)]
sclean_footer <- gsub(scontrino_footer,pattern = "\\d\\d:\\d\\d:\\d\\d",replacement = "")
paste(sclean_header,sclean_footer,scontrino_regolare)
paste(sclean_header,sclean_footer,scontrino_regolare,collapse = " ")
scontrino_header
sclean_header <- scontrino_header[length(scontrino_header)-1]
sclean_header
sclean_footer
sclean_footer <- gsub(scontrino_footer,pattern = "\\d\\d:\\d\\d:\\d\\d ",replacement = "")
sclean_footer
paste(sclean_header,paste(sclean_footer,collapse = "\\n"),scontrino_regolare)
paste(sclean_header,paste(sclean_footer,collapse = "\n"),scontrino_regolare)
paste(sclean_header,paste(sclean_footer),scontrino_regolare)
paste(sclean_header,paste(sclean_footer, collapse=""),scontrino_regolare)
paste(sclean_header,paste(sclean_footer, collapse=" "),scontrino_regolare)
sclean_footer
sclean_footer%<>%ifelse("PRELEVATO DA"%in%., .[-(length(.)-1),.])
sclean_footer%<>%ifelse("PRELEVATO DA"%in%sclean_footer, .[-(length(.)-1),.])
"PRELEVATO DA"%in%sclean_footer
sclean_footer <- gsub(scontrino_footer,pattern = "\\d\\d:\\d\\d:\\d\\d ",replacement = "")
"PRELEVATO DA"%in%sclean_footer
grepl("PRELEVATO DA",ignore.case = T,perl = T,x = sclean_footer)
any(grepl("PRELEVATO DA",ignore.case = T,perl = T,x = sclean_footer)=T)
grepl("PRELEVATO DA",ignore.case = T,perl = T,x = sclean_footer)
if(last(grepl("PRELEVATO DA",ignore.case = T,perl = T,x = sclean_footer))
sclean_footer <- sclean_footer[-length(sclean_footer)]
sclean_footer <- sclean_footer[-which(grepl("PRELEVATO DA",ignore.case = T,perl = T,x = sclean_footer))]
sclean_footer
sclean_footer <- gsub(scontrino_footer,pattern = "\\d\\d:\\d\\d:\\d\\d ",replacement = "")
sclean_footer <- sclean_footer[-which(grepl("PRELEVATO DA",ignore.case = T,perl = T,x = sclean_footer))]
sclean_footer <- sclean_footer[-which(grepl("PRELEVATO DA",ignore.case = T,perl = T,x = sclean_footer))]
sclean_footer <- sclean_footer[-which(grepl("PRELEVATO DA",ignore.case = T,perl = T,x = sclean_footer))]
sclean_footer <- gsub(scontrino_footer,pattern = "\\d\\d:\\d\\d:\\d\\d ",replacement = "")
sclean_footer <- sclean_footer[-which(grepl("PRELEVATO DA",ignore.case = T,perl = T,x = sclean_footer))]
sclean_footer <- gsub(scontrino_footer,pattern = "\\d\\d:\\d\\d:\\d\\d ",replacement = "")
"PRELEVATO"%in%sclean_footer
grepl("PRELEVATO",sclean_footer )
any(grepl("PRELEVATO",sclean_footer ))
which(grepl("PRELEVATO",sclean_footer ))
any(grepl("PRELEVATO",sclean_footer ))
grepl("PRELEVATO",sclean_footer )
if(any(grepl("PRELEVATO",sclean_footer ))){}
if(any(grepl("PRELEVATO",sclean_footer ))){sclean_footer%<>%.[-which(grepl("PRELEVATO",sclean_footer ))]}
if(any(grepl("PRELEVATO",sclean_footer ))){sclean_footer%<>%.[-which(grepl("PRELEVATO",sclean_footer ))]}
if(any(grepl("PRELEVATO",sclean_footer ))){sclean_footer%<>%.[-which(grepl("PRELEVATO",sclean_footer ))]} else {sclean_footer}
sclean_footer <- gsub(scontrino_footer,pattern = "\\d\\d:\\d\\d:\\d\\d ",replacement = "")
if(any(grepl("PRELEVATO",sclean_footer ))){
sclean_footer%<>%.[-which(grepl("PRELEVATO",sclean_footer ))]
}
sclean <- paste(sclean_header,
paste(sclean_footer,collapse = " ")
scontrino_regolare)
sclean <- paste(sclean_header,
paste(sclean_footer,collapse = " "),
scontrino_regolare)
sclean
path_scontrino <- lista_scontrini[2525]
scontrino <- readLines(paste0(path, "\\", path_scontrino), encoding = "UTF-8")
scontrino_text <- paste(scontrino,collapse="")
n <- str_extract(path_scontrino,"(\\d*)(?= [Strumento])")
if(last(grepl("REGOLARE|IRREGOLARE",scontrino,perl = T))==T){
# print(n)
scontrino_header <-
na.omit(gsub(scontrino, pattern = "\\d\\d:\\d\\d:\\d\\d .*", replacement = NA)) %>%
.[5:(length(.) - 1)]
sclean_header <- scontrino_header[length(scontrino_header)-1]
scontrino_regolare <-
na.omit(str_extract(scontrino, pattern = "\\d\\d:\\d\\d:\\d\\d .*")) %>%
gsub("(\\d\\d:){2,}\\d\\d ", "", .) %>% last(.)
scontrino_footer <-
na.omit(str_extract(scontrino, pattern = "\\d\\d:\\d\\d:\\d\\d .*")) %>%
.[1:(length(.) - 1)]
sclean_footer <- gsub(scontrino_footer,pattern = "\\d\\d:\\d\\d:\\d\\d ",replacement = "")
if(any(grepl("PRELEVATO",sclean_footer ))){
sclean_footer%<>%.[-which(grepl("PRELEVATO",sclean_footer ))]
}
sclean <- paste(sclean_header,
paste(sclean_footer,collapse = " "),
scontrino_regolare)
#trasformazione header:
#estrazione di inizio ciclo, tipo ciclo e numero ciclo
dati_header <-
na.omit(
str_extract(
scontrino_header,
"(?<=INIZIO CICLO: ).*|(?<=TIPO CICLO: ).*|(?<=NUMERO CICLO: ).*"
)
)
label_dati_header <- c("INIZIO CICLO", "TIPO CICLO", "NUMERO CICLO")
df_header <- data.frame(cbind(label_dati_header,dati_header), stringsAsFactors = F)
tmydf_header = setNames(data.frame(t(df_header[, -1])), df_header[, 1])
head(tmydf_header)
df_header <- tmydf_header
#trasformazione footer
tempi <-
parse_time(substr(scontrino_footer, 1, 8), format = "%H:%M:%S")
dt <- difftime(tempi, lag(tempi, default = first(tempi)))
processi <- gsub("(\\d\\d:){2,}\\d\\d ", "", scontrino_footer)
temperature <- na.omit(str_extract(processi,"(\\d*)(?=Â°)"))
if(length(temperature)!=0){
temp_flag <- 1
temperature_labels <- paste0("temp.", seq(1, length(temperature), 1))
temperature_table <- data.frame(cbind(temperature_labels,temperature),stringsAsFactors = F)
temperature_table_header <- setNames(data.frame(t(temperature_table[, -1])), temperature_table[, 1])
} else temp_flag <- 0
#### tabelle footer ####
processi <- sapply(processi, trimmer,USE.NAMES = F,simplify = T)
processi_table <-
data.frame(cbind(unique(processi), "1"), stringsAsFactors = F)
processi_table_header <-
setNames(data.frame(t(processi_table[, -1])), processi_table[, 1])
t.labels <- paste0("t.", seq(1, length(dt), 1))
dt_table <-
data.frame(cbind(t.labels, as.numeric(dt)), stringsAsFactors = F)
dt_table_header = setNames(data.frame(t(dt_table[, -1])), dt_table[, 1])
#unione delle tabelle del footer
if(temp_flag==1){
df_footer <- data.frame(cbind(processi_table_header, dt_table_header,temperature_table_header))
} else df_footer <- data.frame(cbind(processi_table_header, dt_table_header))
#trasformazione footer
df_footer <- df_footer %>%
mutate("CICLO REGOLARE" = ifelse(any(
grepl("CICLO IRREGOLARE", scontrino_regolare) == TRUE
), 0, 1))
df <- cbind(df_header,df_footer,testo=scontrino_text)
return(df)
} else data.frame()
scontrino <- readLines(paste0(path, "\\", path_scontrino), encoding = "UTF-8")
scontrino_text <- paste(scontrino,collapse="")
scontrino_header <-
na.omit(gsub(scontrino, pattern = "\\d\\d:\\d\\d:\\d\\d .*", replacement = NA)) %>%
.[5:(length(.) - 1)]
sclean_header <- scontrino_header[length(scontrino_header)-1]
scontrino_regolare <-
na.omit(str_extract(scontrino, pattern = "\\d\\d:\\d\\d:\\d\\d .*")) %>%
gsub("(\\d\\d:){2,}\\d\\d ", "", .) %>% last(.)
scontrino_footer <-
na.omit(str_extract(scontrino, pattern = "\\d\\d:\\d\\d:\\d\\d .*")) %>%
.[1:(length(.) - 1)]
sclean_footer <- gsub(scontrino_footer,pattern = "\\d\\d:\\d\\d:\\d\\d ",replacement = "")
if(any(grepl("PRELEVATO",sclean_footer ))){
sclean_footer%<>%.[-which(grepl("PRELEVATO",sclean_footer ))]
}
sclean <- paste(sclean_header,
paste(sclean_footer,collapse = " "),
scontrino_regolare)
sclean
rm(list=ls())
library(tidyverse)
library(dplyr)
library(lubridate)
library(here)
library(readxl)
library(magrittr)
library(DataExplorer)
library(caret)
library(rlist)
df <-
read.csv2(file = "tabella_scontrini_text.csv",
header = T,
stringsAsFactors = F)
#conversione date e factors
df$INIZIO.CICLO <-
parse_date_time(df$INIZIO.CICLO, orders = "dmy hms")
df$CICLO.REGOLARE <-
factor(df$CICLO.REGOLARE)
df$TIPO.CICLO <- factor(df$TIPO.CICLO)
#caricamento coswin####
# vengono eliminate le righe corrispondenti a chiamate relative all'inserimento
# nel db della macchina di un nuovo strumento.
coswin <- read.csv2(file = "coswin-isa/108841.csv",
header = T,
stringsAsFactors = F) %>%
.[-which(grepl("inseri", x = .$Descrizione,ignore.case = T)),24] %>%
as.character(.) %>%
dmy_hm(.) %>%
as_date(.) %>%
.[which(complete.cases(.))] %>%
unique(.)
#aggiunta colonna dei giorni nella tabella di scontrini
df <- df %>%
mutate("GIORNO" = as_date(.$INIZIO.CICLO))
#aggiunta della bag-label
df <- df %>%
mutate("CHIAMATA" = factor(ifelse(.$GIORNO %in% coswin, 1, 0)))
which(df$CHIAMATA==1)
df[which(df$CHIAMATA==1),which(colnames(df)=="CHIAMATA")]
df[which(df$CHIAMATA==1),which(colnames(df)=="GIORNO")]
unique(df[which(df$CHIAMATA==1),which(colnames(df)=="GIORNO")])
giorni_guasti <- unique(df[which(df$CHIAMATA==1),which(colnames(df)=="GIORNO")])
#trovo le date dei 5 giorni precedenti ad ognuno dei giorni appena trovati
seq(from=giorni_guasti[1],to =giorni_guasti[1]-5,by = 1 )
#trovo le date dei 5 giorni precedenti ad ognuno dei giorni appena trovati
seq(from=giorni_guasti[1],to =giorni_guasti[1]-5,by = -1 )
giorni_guasti[1]
#trovo le date dei 5 giorni precedenti ad ognuno dei giorni appena trovati
seq(from=giorni_guasti[1]-1,to =giorni_guasti[1]-5,by = -1 )
#trovo le date dei 5 giorni precedenti ad ognuno dei giorni appena trovati
seq(from=giorni_guasti-1,to =giorni_guasti-5,by = -1 )
#trovo le date dei 5 giorni precedenti ad ognuno dei giorni appena trovati
# attraverso la funzione backprop
backprop <- function(giorno){
seq(from=giorno-1,to =giorno-5,by = -1 )
}
giorni_predittivi <- sapply(giorni_guasti, backprop)
View(giorni_predittivi)
giorni_predittivi <- sapply(as.date(giorni_guasti), backprop)
#trovo le date dei 5 giorni precedenti ad ognuno dei giorni appena trovati
# attraverso la funzione backprop
backprop <- function(giorno){
seq(from=giorno-1,to =giorno-5,by = -1 )
}
giorni_predittivi <- sapply(as.Date(giorni_guasti), backprop)
View(giorni_predittivi)
giorno <- giorni_guasti[3]
seq(from=giorno-1,to =giorno-5,by = -1 )
str(seq(from=giorno-1,to =giorno-5,by = -1 ))
collapse(seq(from=giorno-1,to =giorno-5,by = -1 ))
collapse(as.character(seq(from=giorno-1,to =giorno-5,by = -1 )))
as.character(seq(from=giorno-1,to =giorno-5,by = -1 ))
paste(as.character(seq(from=giorno-1,to =giorno-5,by = -1 )))
paste(as.character(seq(from=giorno-1,to =giorno-5,by = -1 )))
transpose(paste(as.character(seq(from=giorno-1,to =giorno-5,by = -1 ))))
transpose(paste(seq(from=giorno-1,to =giorno-5,by = -1 )))
paste(seq(from=giorno-1,to =giorno-5,by = -1 ))''
paste(seq(from=giorno-1,to =giorno-5,by = -1 ))'
giorni_predittivi <- sapply(giorni_guasti, backprop,simplify = T)
View(giorni_predittivi)
giorni_predittivi <- sapply(giorni_guasti, backprop,simplify = T) %>% do.call("rbind",.)
giorni_predittivi <- vapply(giorni_guasti, backprop)
giorni_predittivi <- tapply(giorni_guasti, backprop)
giorni_predittivi <- apply(giorni_guasti, backprop)
giorni_predittivi <- tapply(giorni_guasti, backprop())
#trovo le date dei 5 giorni precedenti ad ognuno dei giorni appena trovati
# attraverso la funzione backprop
backprop <- function(giorno){
seq(from=giorno-1,to =giorno-5,by = -1 )
}
giorni_predittivi <- tapply(giorni_guasti, backprop)
giorni_predittivi <- lapply(giorni_guasti, backprop)
View(giorni_predittivi)
View(giorni_predittivi)
df%<>%mutate(flag=ifelse(.$GIORNO==giorni_predittivi,1,0))
df%<>%mutate(flag=ifelse(.$GIORNO%in%giorni_predittivi,1,0))
View(df)
table(df$flag)
df$GIORNO%in%giorni_predittivi
which(df$GIORNO%in%giorni_predittivi)
str(df$GIORNO)
str(giorni_predittivi)
giorno%in%df$GIORNO
giorni_predittivi%in%df$GIORNO
giorni_predittivi[1]
giorni_predittivi[1]%in%df$GIORNO
giorni_predittivi%in%df$GIORNO
View(giorni_predittivi)
giorni_predittivi <- lapply(giorni_guasti, backprop) %>% do.call("rbind",.)
View(giorni_predittivi)
giorni_predittivi <- lapply(giorni_guasti, backprop) %>% as.Date(do.call("rbind",.))
giorni_predittivi <- lapply(giorni_guasti, backprop)
seq(from=giorno-1,to =giorno-5,by = -1 )
t() seq(from=giorno-1,to =giorno-5,by = -1 ))
t( seq(from=giorno-1,to =giorno-5,by = -1 ))
#trovo le date dei 5 giorni precedenti ad ognuno dei giorni appena trovati
# attraverso la funzione backprop
backprop <- function(giorno){
t( seq(from=giorno-1,to =giorno-5,by = -1 ))
}
giorni_predittivi <- lapply(giorni_guasti, backprop)
View(giorni_predittivi)
#trovo le date dei 5 giorni precedenti ad ognuno dei giorni appena trovati
# attraverso la funzione backprop
backprop <- function(giorno){
as.character(seq(from=giorno-1,to =giorno-5,by = -1 ))
}
giorni_predittivi <- lapply(giorni_guasti, backprop)
df%<>%mutate(flag=ifelse(.$GIORNO%in%giorni_predittivi,1,0))
table(df$flag)
View(giorni_predittivi)
View(giorni_predittivi)
giorno%in%giorni_predittivi
as.character(giorno)%in%giorni_predittivi
str(giorno)
giorno-1
(giorno-1)%in%giorni_predittivi
(giorno-1)%in%giorni_predittivi[1]
(giorno-1)%in%giorni_predittivi[2]
(giorno-1)%in%giorni_predittivi[[1]]
df%<>%mutate(flag=ifelse(.$GIORNO%in%giorni_predittivi,1,0))
giorni_predittivi[[1]]
giorni_predittivi[1]
paste0(seq(from=giorno-1,to =giorno-5,by = -1),collapse = "/n")
paste0(seq(from=giorno-1,to =giorno-5,by = -1),collapse = "\n")
paste0(seq(from=giorno-1,to =giorno-5,by = -1),collapse = "\\n")
paste0(seq(from=giorno-1,to =giorno-5,by = -1),collapse = "")
vector(seq(from=giorno-1,to =giorno-5,by = -1))
seq(from=giorno-1,to =giorno-5,by = -1)
"2016-05-28"%in%seq(from=giorno-1,to =giorno-5,by = -1)
as.Date("2016-05-28")%in%seq(from=giorno-1,to =giorno-5,by = -1)
df%<>%mutate(flag=ifelse(as.Date(.$GIORNO)%in%giorni_predittivi,1,0))
df$flag
table(df$flag)
lapply(giorni_predittivi, df$GIORNO%in%.)
flagger <- function(giorni_precedenti){
df%<>%mutate(flag=ifelse(as.Date(.$GIORNO)%in%giorni_precedenti,1,0))
}
flagger <- function(giorni_precedenti){
df%<>%mutate(flag=ifelse(as.Date(.$GIORNO)%in%giorni_precedenti,1,0))
}
lapply(giorni_predittivi,flagger)
df_bags <- pblapply(giorni_predittivi,flagger)
df_bags <- pblapply(giorni_predittivi,flagger) %>% do.call("rbind",.)
df%<>%mutate(flag=lapply(giorni_predittivi,
function(giorni_precedenti){
ifelse(as.Date(.$GIORNO)%in%giorni_precedenti,1,0)
}))
#trovo le date dei 5 giorni precedenti ad ognuno dei giorni appena trovati
# attraverso la funzione backprop
backprop <- function(giorno){
seq(from=giorno-1,to =giorno-5,by = -1)
}
giorni_predittivi <- lapply(giorni_guasti, backprop)
df%<>%mutate(flag=lapply(giorni_predittivi,
function(giorni_precedenti){
ifelse(as.Date(.$GIORNO)%in%giorni_precedenti,1,0)
}))
df$GIORNO
df$GIORNO%IN%giorni_predittivi[1]
df$GIORNO%in%giorni_predittivi[1]
which(df$GIORNO%in%giorni_predittivi[1])
which(as.Date(df$GIORNO)%in%giorni_predittivi[1])
giorni_predittivi[1]
which(as.Date(df$GIORNO)%in%giorni_predittivi[[1]])
which(as.Date(df$GIORNO)%in%giorni_predittivi[[2]])
which(as.Date(df$GIORNO)%in%giorni_predittivi[[3]])
which(as.Date(df$GIORNO)%in%giorni_predittivi[[3]])
a <- unlist(giorni_predittivi)
a <- unlist(as.Date(giorni_predittivi))
a <- unlist(as.Date(giorni_predittivi),recursive = T)
a <- unlist(giorni_predittivi,recursive = T)
a <- lapply(giorni_predittivi,function(giorni_precedenti){
ifelse(as.Date(df$GIORNO)%in%giorni_precedenti,1,0)
})
View(a)
View(a)
a <- lapply(giorni_predittivi,function(giorni_precedenti){
any(ifelse(as.Date(df$GIORNO)%in%giorni_precedenti,1,0))==1
})
View(a)
View(a)
warnings()
which(as.Date(df$GIORNO)==giorni_predittivi)
which(as.Date(df$GIORNO)==giorni_predittivi[[1]])
#trovo le date dei 5 giorni precedenti ad ognuno dei giorni appena trovati
# attraverso la funzione backprop
backprop <- function(giorno){
as.list(seq(from=giorno-1,to =giorno-5,by = -1))
}
giorni_predittivi <- lapply(giorni_guasti, backprop)
View(giorni_predittivi)
giorni_predittivi[1]
df$GIORNO%in%giorni_predittivi[1]
which(df$GIORNO%in%giorni_predittivi[1])
which(as.Date(df$GIORNO)%in%giorni_predittivi[1])
which(as.Date(df$GIORNO)%in%giorni_predittivi[[1]])
which(as.Date(df$GIORNO)%in%giorni_predittivi[[2]])
which(as.Date(df$GIORNO)%in%giorni_predittivi[[3]])
#trovo le date dei 5 giorni precedenti ad ognuno dei giorni appena trovati
# attraverso la funzione backprop
backprop <- function(giorno){
as.list(seq(from=giorno-1,to =giorno-5,by = -1))
}
giorni_predittivi <- lapply(giorni_guasti, backprop)
install.packages(c("devtools", "htmltools", "shiny",
"miniUI", "formatR", "wrapr"))
install.packages(c("devtools", "htmltools", "shiny",
"miniUI", "formatR", "wrapr"))
devtools::install_github("WinVector/addinexamples")
install.packages("addinexamples")
devtools::install_github("WinVector/addinexamples")
df%<>%mutate(flag=ifelse(as.Date(df$GIORNO)%in%giorni_precedenti,1,0))
library(tidyverse)
library(dplyr)
library(lubridate)
library(here)
library(readxl)
library(magrittr)
library(DataExplorer)
library(caret)
library(rlist)
df%<>%mutate(flag=ifelse(as.Date(df$GIORNO)%in%giorni_precedenti,1,0))
df%<>%mutate(flag=ifelse(as.Date(df$GIORNO)%in%giorni_predittivi,1,0))
table(df$flag)
df%<>%mutate(flag=ifelse(as.Date(df$GIORNO)==giorni_predittivi,1,0))
which(as.Date(df$GIORNO)%in%giorni_predittivi[[2]])
giorni_predittivi <- lapply(giorni_guasti, backprop) %>% unlist(.)
giorni_predittivi <- lapply(giorni_guasti, backprop) %>% unlist(as.Date(.))
giorni_predittivi <- lapply(giorni_guasti, backprop) %>% unnest()
giorni_predittivi <- lapply(giorni_guasti, backprop) %>% unlist(.,recursive = T)
giorni_predittivi <- lapply(giorni_guasti, backprop)
giorni_predittivi <- lapply(giorni_guasti, backprop) %>% bind_rows(.)
giorni_predittivi <- sapply(giorni_guasti, backprop)
View(giorni_predittivi)
View(giorni_predittivi)
which(as.Date(df$GIORNO)%in%giorni_predittivi[[2]])
which(as.Date(df$GIORNO)%in%giorni_predittivi[2])
df%<>%mutate(flag=ifelse(as.Date(df$GIORNO)%in%giorni_predittivi,1,0))
df$flag
table(df$flag)
View(df)
View(df)
988/4340
0.2*4340
#aggiunta della bag-label
df <- df %>%
mutate("CHIAMATA" = factor(ifelse(.$GIORNO %in% coswin, 1, 0)),
"BAG"=factor(cut.Date(df$GIORNO, breaks = "5 days",labels = F)))
#trovo i giorni in cui ci sono state chiamate a coswin
giorni_guasti <- unique(df[which(df$CHIAMATA==1),which(colnames(df)=="GIORNO")])
#trovo le date dei 5 giorni precedenti ad ognuno dei giorni appena trovati
# attraverso la funzione backprop
backprop <- function(giorno){
as.list(seq(from=giorno-1,to =giorno-5,by = -1))
}
giorni_predittivi <- sapply(giorni_guasti, backprop)
# assegno flag=1 in corrispondenza dei giorni predittivi
df%<>%mutate(flag=ifelse(as.Date(df$GIORNO)%in%giorni_predittivi,1,0))
View(df)
table(df$flag,df$BAG)
df <-
read.csv2(file = "tabella_scontrini_text.csv",
header = T,
stringsAsFactors = F)
#conversione date e factors
df$INIZIO.CICLO <-
parse_date_time(df$INIZIO.CICLO, orders = "dmy hms")
df$CICLO.REGOLARE <-
factor(df$CICLO.REGOLARE)
df$TIPO.CICLO <- factor(df$TIPO.CICLO)
#caricamento coswin####
# vengono eliminate le righe corrispondenti a chiamate relative all'inserimento
# nel db della macchina di un nuovo strumento.
coswin <- read.csv2(file = "coswin-isa/108841.csv",
header = T,
stringsAsFactors = F) %>%
.[-which(grepl("inseri", x = .$Descrizione,ignore.case = T)),24] %>%
as.character(.) %>%
dmy_hm(.) %>%
as_date(.) %>%
.[which(complete.cases(.))] %>%
unique(.)
#aggiunta colonna dei giorni nella tabella di scontrini
df <- df %>%
mutate("GIORNO" = as_date(.$INIZIO.CICLO))
#aggiunta della bag-label
df <- df %>%
mutate("CHIAMATA" = factor(ifelse(.$GIORNO %in% coswin, 1, 0)))
#trovo i giorni in cui ci sono state chiamate a coswin
giorni_guasti <- unique(df[which(df$CHIAMATA==1),which(colnames(df)=="GIORNO")])
#trovo le date dei 5 giorni precedenti ad ognuno dei giorni appena trovati
# attraverso la funzione backprop
backprop <- function(giorno){
as.list(seq(from=giorno-1,to =giorno-5,by = -1))
}
giorni_predittivi <- sapply(giorni_guasti, backprop)
# assegno flag=1 in corrispondenza dei giorni predittivi
df%<>%mutate(flag=ifelse(as.Date(df$GIORNO)%in%giorni_predittivi,1,0))
df_pos <- df[which(df$flag==1),] %>%
mutate("BAG"=factor(cut.Date(df$GIORNO, breaks = "5 days",labels = F)))
df_pos <- df[which(df$flag==1),] %>%
mutate("BAG"=factor(cut.Date(.$GIORNO, breaks = "5 days",labels = F)))
df_pos_bag <- as.list(split(df_pos,f = df_pos$BAG))
View(df_pos_bag)
View(df_pos_bag[["1"]])
df_pos <- df[which(df$flag==1),] %>% as.list(split(.,f = df_pos$GIORNO))
View(df_pos)
View(df_pos)
View(df_pos)
df_pos[["GIORNO"]]
df_pos <- df[which(df$flag==1),]
View(df_pos)
df_pos <- df[which(df$flag==1),] %>%
mutate("BAG"=factor(cut.Date(.$GIORNO, breaks = "5 days",labels = F)))
View(df_pos)
df_pos_bag <- as.list(split(df_pos,f = df_pos$BAG))
View(df_pos_bag)
