test_temp1 <- testing[, c(5,38)]
predictions <- predict(mod0, test_temp1)
confusionMatrix(predictions, testing$TARGET,mode = "everything",positive = "pos")
confusionMatrix(predictions, test_temp1$TARGET,mode = "everything",positive = "pos")
mod0
plot(mod0)
mod0 <- train(TARGET ~ ., data = training_temp1,
method = "svmLinear",
na.action = na.pass,
trControl = trainControl( verboseIter = T))
predictions <- predict(mod0, test_temp1)
confusionMatrix(predictions, test_temp1$TARGET,mode = "everything",positive = "pos")
mod0 <- train(TARGET ~ ., data = training_temp1,
method = "knn",
na.action = na.pass,
trControl = trainControl( verboseIter = T))
predictions <- predict(mod0, test_temp1)
confusionMatrix(predictions, test_temp1$TARGET,mode = "everything",positive = "pos")
predictions <- predict(mod0, test_temp1$TARGET)
predictions <- predict(mod0, test_temp1)
confusionMatrix(predictions, test_temp1$TARGET,mode = "everything",positive = "pos")
plot(mod0)
plot(training_temp1$temp.1)
boxplot(training_temp1$temp.1)
hist(training_temp1)
hist(training_temp1$temp.1)
confusionMatrix(predictions, test_temp1$TARGET,mode = "everything",positive = "pos")
corr(training$temp.1)
corr(training_temp1)
cor(training_temp1)
cor(training_temp1$temp.1)
cor(training_temp1$temp.1,y = training_temp1$TARGET)
cor(training_temp1$temp.1,y = as.numeric(training_temp1$TARGET))
install.packages("corrplot")
library(corrplot)
source("http://www.sthda.com/upload/rquery_cormat.r")
rquery.cormat(training, type="full")
rquery.cormat(df_backed, type="full")
rquery.cormat(df_backed$t.7, type="full")
rquery.cormat(as.numeric(df_backed), type="full")
library(here)
path1 = here("isareport16-19")
scontrino1 <- readLines(
paste0(
path1,
"\\",
"2016-03-07 12.12 01 Strumento-G111106 Operatore-Technical.txt"
),
encoding = "UTF-8"
)
scontrino1
library(tm)
text_corpus <- VCorpus(scontrino1)
text_corpus <- VCorpus(VectorSource(scontrino1))
scontrino_header <-
na.omit(gsub(scontrino, pattern = "\\d\\d:\\d\\d:\\d\\d .*", replacement = NA)) %>%
.[5:(length(.) - 1)]
scontrino1 <- scontrino
scontrino <- scontrino1
scontrino_header <-
na.omit(gsub(scontrino, pattern = "\\d\\d:\\d\\d:\\d\\d .*", replacement = NA)) %>%
.[5:(length(.) - 1)]
scontrino_regolare <-
na.omit(str_extract(scontrino, pattern = "\\d\\d:\\d\\d:\\d\\d .*")) %>%
gsub("(\\d\\d:){2,}\\d\\d ", "", .) %>% last(.)
scontrino_footer <-
na.omit(str_extract(scontrino, pattern = "\\d\\d:\\d\\d:\\d\\d .*")) %>%
.[1:(length(.) - 1)]
scontrino_header
cat(scontrino_header)
scontrino_header
VCorpus(VectorSource(scontrino_header))
text_corpus
VCorpus(VectorSource(scontrino))
scontrino_text <- scontrino
df <- cbind(df_header,df_footer,testo=scontrino_)
df <- cbind(df_header,df_footer,testo=scontrino_text)
#### funzione che dato in input uno scontrino lo trasforma in una tabella####
morpher <- function(path_scontrino) {
scontrino <- readLines(paste0(path, "\\", path_scontrino), encoding = "UTF-8")
scontrino_text <- scontrino
n <- str_extract(path_scontrino,"(\\d*)(?= [Strumento])")
if(last(grepl("REGOLARE|IRREGOLARE",scontrino,perl = T))==T){
# print(n)
scontrino_header <-
na.omit(gsub(scontrino, pattern = "\\d\\d:\\d\\d:\\d\\d .*", replacement = NA)) %>%
.[5:(length(.) - 1)]
scontrino_regolare <-
na.omit(str_extract(scontrino, pattern = "\\d\\d:\\d\\d:\\d\\d .*")) %>%
gsub("(\\d\\d:){2,}\\d\\d ", "", .) %>% last(.)
scontrino_footer <-
na.omit(str_extract(scontrino, pattern = "\\d\\d:\\d\\d:\\d\\d .*")) %>%
.[1:(length(.) - 1)]
#trasformazione header:
#estrazione di inizio ciclo, tipo ciclo e numero ciclo
dati_header <-
na.omit(
str_extract(
scontrino_header,
"(?<=INIZIO CICLO: ).*|(?<=TIPO CICLO: ).*|(?<=NUMERO CICLO: ).*"
)
)
label_dati_header <- c("INIZIO CICLO", "TIPO CICLO", "NUMERO CICLO")
df_header <- data.frame(cbind(label_dati_header,dati_header), stringsAsFactors = F)
tmydf_header = setNames(data.frame(t(df_header[, -1])), df_header[, 1])
head(tmydf_header)
df_header <- tmydf_header
#trasformazione footer
tempi <-
parse_time(substr(scontrino_footer, 1, 8), format = "%H:%M:%S")
dt <- difftime(tempi, lag(tempi, default = first(tempi)))
processi <- gsub("(\\d\\d:){2,}\\d\\d ", "", scontrino_footer)
temperature <- na.omit(str_extract(processi,"(\\d*)(?=°)"))
if(length(temperature)!=0){
temp_flag <- 1
temperature_labels <- paste0("temp.", seq(1, length(temperature), 1))
temperature_table <- data.frame(cbind(temperature_labels,temperature),stringsAsFactors = F)
temperature_table_header <- setNames(data.frame(t(temperature_table[, -1])), temperature_table[, 1])
} else temp_flag <- 0
#### tabelle footer ####
processi <- sapply(processi, trimmer,USE.NAMES = F,simplify = T)
processi_table <-
data.frame(cbind(unique(processi), "1"), stringsAsFactors = F)
processi_table_header <-
setNames(data.frame(t(processi_table[, -1])), processi_table[, 1])
t.labels <- paste0("t.", seq(1, length(dt), 1))
dt_table <-
data.frame(cbind(t.labels, as.numeric(dt)), stringsAsFactors = F)
dt_table_header = setNames(data.frame(t(dt_table[, -1])), dt_table[, 1])
#unione delle tabelle del footer
if(temp_flag==1){
df_footer <- data.frame(cbind(processi_table_header, dt_table_header,temperature_table_header))
} else df_footer <- data.frame(cbind(processi_table_header, dt_table_header))
#trasformazione footer
df_footer <- df_footer %>%
mutate("CICLO REGOLARE" = ifelse(any(
grepl("CICLO IRREGOLARE", scontrino_regolare) == TRUE
), 0, 1))
df <- cbind(df_header,df_footer,testo=scontrino_text)
return(df)
} else data.frame()
}
#path = "C:\\Users\\frtranquillo\\github\\tesi_repository\\Data\\ISA\\isareport16-19\\16-17-18"
path <- here("isareport16-19")
lista_scontrini <- as.list(list.files(path, pattern = "*.txt"))
# applico funzione morpher agli scontrini validi e poi unisco
message("Analisi degli scontrini in corso...")
tabella_scontrini <- pblapply(lista_scontrini, morpher) %>%
bind_rows(.)
library(pbapply)
tabella_scontrini <- pblapply(lista_scontrini, morpher) %>%
bind_rows(.)
#### funzione che pulisce il nome di un processo
# presente in uno scontrino, standardizzandolo
trimmer <- function(nome_processo){
processo <- as.character(nome_processo) %>%
gsub(pattern =  " \\(.*\\)|:(?<=:).*",replacement = "",x = .,perl = T)
return(processo)
}
tabella_scontrini <- pblapply(lista_scontrini, morpher) %>%
bind_rows(.)
tabella_scontrini$`TIPO CICLO` <-
factor(tabella_scontrini$`TIPO CICLO`)
test <- tabella_scontrini
test$`TIPO CICLO` <-
test$`TIPO CICLO` %>% fct_collapse(
CALIBRAZIONE = c("CALIBRATION", "CALIBRAZIONE"),
"DISINFEZIONE COMPLETA" = c("COMPLETE DISINFECTION", "DISINFEZIONE COMPLETA"),
"DISINFEZIONE VELOCE" = c("DISINFEZIONE VELOCE", "FAST DISINFECTION"),
"STERILIZZAZIONE COMPLETA" = c("COMPLETE STERILIZATION", "STERILIZZAZIONE COMPLETA"),
"STERILIZZAZIONE VELOCE" = c(
" STERILIZAZIONE VELOCE" ,
"FAST STERILIZATION",
"ster velo1",
" STERILIZZAZIONE VELOCE"
)
)
table(test$`TIPO CICLO`)
write.csv2(test,
file = here("tabella_scontrini_text.csv"),
row.names = F)
#### funzione che dato in input uno scontrino lo trasforma in una tabella####
morpher <- function(path_scontrino) {
scontrino <- readLines(paste0(path, "\\", path_scontrino), encoding = "UTF-8")
scontrino_text <- paste(scontrino,collapse="")
n <- str_extract(path_scontrino,"(\\d*)(?= [Strumento])")
if(last(grepl("REGOLARE|IRREGOLARE",scontrino,perl = T))==T){
# print(n)
scontrino_header <-
na.omit(gsub(scontrino, pattern = "\\d\\d:\\d\\d:\\d\\d .*", replacement = NA)) %>%
.[5:(length(.) - 1)]
scontrino_regolare <-
na.omit(str_extract(scontrino, pattern = "\\d\\d:\\d\\d:\\d\\d .*")) %>%
gsub("(\\d\\d:){2,}\\d\\d ", "", .) %>% last(.)
scontrino_footer <-
na.omit(str_extract(scontrino, pattern = "\\d\\d:\\d\\d:\\d\\d .*")) %>%
.[1:(length(.) - 1)]
#trasformazione header:
#estrazione di inizio ciclo, tipo ciclo e numero ciclo
dati_header <-
na.omit(
str_extract(
scontrino_header,
"(?<=INIZIO CICLO: ).*|(?<=TIPO CICLO: ).*|(?<=NUMERO CICLO: ).*"
)
)
label_dati_header <- c("INIZIO CICLO", "TIPO CICLO", "NUMERO CICLO")
df_header <- data.frame(cbind(label_dati_header,dati_header), stringsAsFactors = F)
tmydf_header = setNames(data.frame(t(df_header[, -1])), df_header[, 1])
head(tmydf_header)
df_header <- tmydf_header
#trasformazione footer
tempi <-
parse_time(substr(scontrino_footer, 1, 8), format = "%H:%M:%S")
dt <- difftime(tempi, lag(tempi, default = first(tempi)))
processi <- gsub("(\\d\\d:){2,}\\d\\d ", "", scontrino_footer)
temperature <- na.omit(str_extract(processi,"(\\d*)(?=°)"))
if(length(temperature)!=0){
temp_flag <- 1
temperature_labels <- paste0("temp.", seq(1, length(temperature), 1))
temperature_table <- data.frame(cbind(temperature_labels,temperature),stringsAsFactors = F)
temperature_table_header <- setNames(data.frame(t(temperature_table[, -1])), temperature_table[, 1])
} else temp_flag <- 0
#### tabelle footer ####
processi <- sapply(processi, trimmer,USE.NAMES = F,simplify = T)
processi_table <-
data.frame(cbind(unique(processi), "1"), stringsAsFactors = F)
processi_table_header <-
setNames(data.frame(t(processi_table[, -1])), processi_table[, 1])
t.labels <- paste0("t.", seq(1, length(dt), 1))
dt_table <-
data.frame(cbind(t.labels, as.numeric(dt)), stringsAsFactors = F)
dt_table_header = setNames(data.frame(t(dt_table[, -1])), dt_table[, 1])
#unione delle tabelle del footer
if(temp_flag==1){
df_footer <- data.frame(cbind(processi_table_header, dt_table_header,temperature_table_header))
} else df_footer <- data.frame(cbind(processi_table_header, dt_table_header))
#trasformazione footer
df_footer <- df_footer %>%
mutate("CICLO REGOLARE" = ifelse(any(
grepl("CICLO IRREGOLARE", scontrino_regolare) == TRUE
), 0, 1))
df <- cbind(df_header,df_footer,testo=scontrino_text)
return(df)
} else data.frame()
}
#path = "C:\\Users\\frtranquillo\\github\\tesi_repository\\Data\\ISA\\isareport16-19\\16-17-18"
path <- here("isareport16-19")
lista_scontrini <- as.list(list.files(path, pattern = "*.txt"))
# applico funzione morpher agli scontrini validi e poi unisco
message("Analisi degli scontrini in corso...")
tabella_scontrini <- pblapply(lista_scontrini, morpher) %>%
bind_rows(.)
library(readxl)
tabella_scontrini<-tabella_scontrini[,order(colnames(tabella_scontrini),decreasing=TRUE)]
#tabella_scontrini <- tabella_scontrini[, 2:12]
head(tabella_scontrini)
tabella_scontrini$`TIPO CICLO` <-
factor(tabella_scontrini$`TIPO CICLO`)
test <- tabella_scontrini
test$`TIPO CICLO` <-
test$`TIPO CICLO` %>% fct_collapse(
CALIBRAZIONE = c("CALIBRATION", "CALIBRAZIONE"),
"DISINFEZIONE COMPLETA" = c("COMPLETE DISINFECTION", "DISINFEZIONE COMPLETA"),
"DISINFEZIONE VELOCE" = c("DISINFEZIONE VELOCE", "FAST DISINFECTION"),
"STERILIZZAZIONE COMPLETA" = c("COMPLETE STERILIZATION", "STERILIZZAZIONE COMPLETA"),
"STERILIZZAZIONE VELOCE" = c(
" STERILIZAZIONE VELOCE" ,
"FAST STERILIZATION",
"ster velo1",
" STERILIZZAZIONE VELOCE"
)
)
table(test$`TIPO CICLO`)
write.csv2(test,
file = here("tabella_scontrini_text.csv"),
row.names = F)
df <-
read.csv2(file = "tabella_scontrini_text.csv",
header = T,
stringsAsFactors = F)
#conversione date e factors
df$INIZIO.CICLO <-
parse_date_time(df$INIZIO.CICLO, orders = "dmy hms")
df$CICLO.REGOLARE <-
factor(df$CICLO.REGOLARE)
df$TIPO.CICLO <- factor(df$TIPO.CICLO)
#caricamento coswin ####
coswin <- read.csv2(file = "coswin-isa/108841.csv",
header = T,
stringsAsFactors = F) %>%
.[, 24] %>%
as.character(.) %>%
dmy_hm(.) %>%
as_date(.) %>%
.[which(complete.cases(.))] %>%
unique(.)
#aggiunta colonna dei giorni nella tabella di scontrini
df <- df %>%
mutate("GIORNO" = as_date(.$INIZIO.CICLO))
df <- df %>%
mutate("CHIAMATA" = factor(ifelse(.$GIORNO %in% coswin, 1, 0)))
table(df$CHIAMATA)
#scrivo una funzione che data la tabella degli scontrini (!), crea la variabile CHIAMATA-X con X uguale
#al numero di giorni che precedono una chiamata.
#ad esempio per una predizione di 3 giorni, assegno CHIAMATA-3 = 1 anche ai 3 giorni precedenti
#all'effettiva chiamata.
back_assign <- function(table, x) {
df_ch_1 <- unique(table$GIORNO[which(table$CHIAMATA == 1)])
a <-
sapply(
X = df_ch_1,
FUN = function(date)
format(date - days(1:x), format = "%Y-%m-%d"),
simplify = T
)
col_name <<- paste0("CHIAMATA-", x)
df_backed <-
table %>% mutate(., "TARGET"=factor(ifelse(.$GIORNO %in% as.Date(a), 1, 0)))
table(df_backed$col_name)
return(df_backed)
}
#predizione a X giorni
df_backed <- back_assign(df, 4)
#riordino le colonne in ordine alfabetico per conversione multipla
df_backed<-df_backed[,order(colnames(df_backed),decreasing=TRUE)]
write.csv2(df_backed, file = here(paste0(col_name,"-", "ISACOS.csv")),row.names = F)
df_backed <-
read.csv2(file = "CHIAMATA-4-ISACOS.csv",
header = T,
stringsAsFactors = T)
View(df_backed)
df_tm <- df_backed[, c(2,8)]
df_tm$testo <- as.character(df_tm$testo)
c_testo <- VCorpus(VectorSource(df_tm$testo))
c_testo_dtm <- DocumentTermMatrix(c_testo)
convert_counts <- function(x) {
x <- ifelse(x > 0, "Yes", "No")
}
View(c_testo_dtm)
trainIndex <- createDataPartition(c_testo_dtm, p = .8,
list = FALSE,
times = 1)
trainIndex <- createDataPartition(df_tm$TARGET, p = .8,
list = FALSE,
times = 1)
train <- c_testo_dtm[ trainIndex,]
test <-  c_testo_dtm[-trainIndex,]
train_labels <- df_tm$TARGET[trainIndex]
test_labels <- df_tm$TARGET[-trainIndex]
freq_words <- findFreqTerms(train,lowfreq = 200)
freq_words <- findFreqTerms(train,lowfreq = 100)
train <- c_testo_dtm[ trainIndex,] %>% apply(., MARGIN = 2, convert_counts)
freq_words <- findFreqTerms(train,lowfreq = 300)
freq_words <- findFreqTerms(train,lowfreq = 50)
freq_words <- findFreqTerms(train,lowfreq = 50)
freq_train <- train[, descr_freq_words]
freq_train <- train[, freq_words]
freq_test <- test[, freq_words]
txt_train <- apply(freq_train, MARGIN = 2, convert_counts)
txt_train <- apply(freq_train, MARGIN = 2, convert_counts)
txt_test <- apply(freq_test, MARGIN = 2, convert_counts)
descr_classifier2 <-
naiveBayes(txt_train, train_labels, laplace = 1)
library(e1071)
descr_classifier2 <-
naiveBayes(txt_train, train_labels, laplace = 1)
descr_test_pred2 <- predict(descr_classifier2, descr_test)
descr_test_pred2 <- predict(descr_classifier2, txt_test)
descr_test_pred2
descr_classifier2
confusionMatrix(descr_test_pred2, test_labels,
positive = "0")
confusionMatrix(descr_test_pred2, test_labels)
#caricamento coswin ####
coswin <- read.csv2(file = "coswin-isa/108841.csv",
header = T,
stringsAsFactors = F) %>%
.[, 24]
#caricamento coswin ####
coswin <- read.csv2(file = "coswin-isa/108841.csv",
header = T,
stringsAsFactors = F)
coswin[which("inserimento"%in%coswin$Descrizione),24]
which("inserimento"%in%coswin$Descrizione)
grepl("inserimento", x = coswin$Descrizione)
coswin[which(grepl("inser|INSERI", x = coswin$Descrizione),24]
grepl("inser|INSERI", x = coswin$Descrizione)
coswin[which(grepl("inser|INSERI|Inseri", x = coswin$Descrizione),24]
grepl("inseri", x = coswin$Descrizione,ignore.case = T)
coswin[-which(grepl("inseri", x = coswin$Descrizione,ignore.case = T),24]
coswin[-which(grepl("inseri", x = coswin$Descrizione,ignore.case = T)),24]
#caricamento coswin ####
coswin <- read.csv2(file = "coswin-isa/108841.csv",
header = T,
stringsAsFactors = F) %>%
.[-which(grepl("inseri", x = .$Descrizione,ignore.case = T)),24] %>%
.[, 24] %>%
as.character(.) %>%
dmy_hm(.) %>%
as_date(.) %>%
.[which(complete.cases(.))] %>%
unique(.)
#caricamento coswin ####
coswin <- read.csv2(file = "coswin-isa/108841.csv",
header = T,
stringsAsFactors = F) %>%
.[-which(grepl("inseri", x = .$Descrizione,ignore.case = T)),24] %>%
as.character(.) %>%
dmy_hm(.) %>%
as_date(.) %>%
.[which(complete.cases(.))] %>%
unique(.)
#aggiunta colonna dei giorni nella tabella di scontrini
df <- df %>%
mutate("GIORNO" = as_date(.$INIZIO.CICLO))
df <- df %>%
mutate("CHIAMATA" = factor(ifelse(.$GIORNO %in% coswin, 1, 0)))
table(df$CHIAMATA)
#scrivo una funzione che data la tabella degli scontrini (!), crea la variabile CHIAMATA-X con X uguale
#al numero di giorni che precedono una chiamata.
#ad esempio per una predizione di 3 giorni, assegno CHIAMATA-3 = 1 anche ai 3 giorni precedenti
#all'effettiva chiamata.
back_assign <- function(table, x) {
df_ch_1 <- unique(table$GIORNO[which(table$CHIAMATA == 1)])
a <-
sapply(
X = df_ch_1,
FUN = function(date)
format(date - days(1:x), format = "%Y-%m-%d"),
simplify = T
)
col_name <<- paste0("CHIAMATA-", x)
df_backed <-
table %>% mutate(., "TARGET"=factor(ifelse(.$GIORNO %in% as.Date(a), 1, 0)))
table(df_backed$col_name)
return(df_backed)
}
table(df$CHIAMATA)
table(df$CHIAMATA,df$TIPO.CICLO)
table(df$CHIAMATA,df$TEMPERATURA)
table(df$CHIAMATA,df$Allarme.valvole.ingresso.acqua)
table(df$CHIAMATA,df$Allarme.temperatura.massima.acqua)
View(df)
#bagging
cut.Date(df$GIORNO, breaks = "1 week")
#bagging
cut.Date(df$GIORNO, breaks = "5 days")
#bagging
df <- df %>% mutate(bag=cut.Date(df$GIORNO, breaks = "5 days"))
View(df)
df <-
read.csv2(file = "tabella_scontrini_text.csv",
header = T,
stringsAsFactors = F)
#conversione date e factors
df$INIZIO.CICLO <-
parse_date_time(df$INIZIO.CICLO, orders = "dmy hms")
df$CICLO.REGOLARE <-
factor(df$CICLO.REGOLARE)
df$TIPO.CICLO <- factor(df$TIPO.CICLO)
#caricamento coswin ####
coswin <- read.csv2(file = "coswin-isa/108841.csv",
header = T,
stringsAsFactors = F) %>%
.[-which(grepl("inseri", x = .$Descrizione,ignore.case = T)),24] %>%
as.character(.) %>%
dmy_hm(.) %>%
as_date(.) %>%
.[which(complete.cases(.))] %>%
unique(.)
#aggiunta colonna dei giorni nella tabella di scontrini
df <- df %>%
mutate("GIORNO" = as_date(.$INIZIO.CICLO))
df <- df %>%
mutate("CHIAMATA" = factor(ifelse(.$GIORNO %in% coswin, 1, 0)))
table(df$CHIAMATA,df$Allarme.temperatura.massima.acqua)
#bagging
df <- df %>% mutate(bag=cut.Date(df$GIORNO, breaks = "5 days"))
#bagging
df <- df %>% mutate(bag=cut.Date(df$GIORNO, breaks = "5 days",labels = F))
View(df)
df[which(df$bag==217),][2]
head(df[which(df$bag==217),])
df[which(df$bag==217),][66]
summary(df[which(df$bag==217),][66])
df[which(df$bag==217),][65]
df[which(df$bag==217),][64]
summary(df[which(df$bag==217),][64])
length(complete.cases(df[which(df$bag==217),][64]))
complete.cases(df[which(df$bag==217),][64]
)
complete.cases(df[which(df$bag==217),][64],case=T)
sum(df[which(df$bag==217),][64])
sum(df[which(df$bag==217),][64] %>% drop_na(.))
sum(df[which(df$bag==217),][67] %>% drop_na(.))
sum(df[which(df$bag==217),][66] %>% drop_na(.))
sum(df[which(df$bag==217),][69] %>% drop_na(.))
sum(df[which(df$bag==217),][61] %>% drop_na(.))
sum(df[which(df$bag==217),][57] %>% drop_na(.))
df[which(df$bag==217),][57]
View(df)
table(df$bag)
barplot(table(df$bag))
summarise(table(df$bag))
unique(df$bag)
#bagging
df <- df %>% mutate(bag=factor(cut.Date(df$GIORNO, breaks = "5 days",labels = F)))
table(df$bag)
barplot(df$bag)
barplot(table(df$bag)))
barplot(table(df$bag))
